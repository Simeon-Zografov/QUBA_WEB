{"name": "Check Historic sites", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <Tests.test_Sites.TestSites object at 0x103563790>\ndriver = <selenium.webdriver.safari.webdriver.WebDriver (session=\"DB76AC28-E9A1-4323-A659-2B65A2C7D3FD\")>\nsite_type = 'Historic', test_case = ['58355', '58356', '58357', '58399']\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('Sites')\n    @allure.title(\"Check {site_type} sites\")\n    @allure.issue(\"QP-263\", \"Story QP-263\")\n    @allure.issue(\"QP-356\", \"Epic QP-356\")\n    @allure.testcase(\"58355\", \"C58355\")\n    @allure.testcase(\"58356\", \"C58356\")\n    @allure.testcase(\"58357\", \"C58357\")\n    @allure.testcase(\"58359\", \"C58359\")\n    @allure.testcase(\"58360\", \"C58360\")\n    @allure.testcase(\"58361\", \"C58361\")\n    @allure.testcase(\"58399\", \"C58399\")\n    @allure.testcase(\"58396\", \"C58396\")\n    @pytest.mark.parametrize('site_type, test_case', [\n        (\"Historic\", [\"58355\", \"58356\", \"58357\", \"58399\"]),\n        (\"Retail\", [\"58359\", \"58360\", \"58361\", \"58396\"])\n    ])\n    def test_7(self, driver, site_type, test_case):\n        sites_obj = Sites(driver)\n>       sites_obj.click_site_tab_button(site_type)\n\nTests/test_Sites.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages/SitesPage.py:103: in click_site_tab_button\n    self.driver.find_element(By.XPATH, f\"//button[@aria-controls='{site_type}']\").click()\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10362dc10>\nresponse = {'status': 408, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException"}, "parameters": [{"name": "site_type", "value": "'Historic'"}, {"name": "test_case", "value": "['58355', '58356', '58357', '58399']"}, {"name": "driver", "value": "'safari'"}], "start": 1733725656396, "stop": 1733725956444, "uuid": "36cd9e03-12db-4c40-a864-90fe32136b8c", "historyId": "e86510762afae3661709a78d988ac09e", "testCaseId": "a72c318386e0acd61663fd69d6834350", "fullName": "Tests.test_Sites.TestSites#test_7", "labels": [{"name": "feature", "value": "Sites"}, {"name": "severity", "value": "normal"}, {"name": "tag", "value": "flaky(reruns=3, reruns_delay=1)"}, {"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_Sites"}, {"name": "subSuite", "value": "TestSites"}, {"name": "host", "value": "Mac-1733723828397.local"}, {"name": "thread", "value": "2344-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_Sites"}], "links": [{"type": "tms", "url": "https://hedgehoglabqa.testrail.io/index.php?/cases/view/58396", "name": "C58396"}, {"type": "tms", "url": "https://hedgehoglabqa.testrail.io/index.php?/cases/view/58399", "name": "C58399"}, {"type": "tms", "url": "https://hedgehoglabqa.testrail.io/index.php?/cases/view/58361", "name": "C58361"}, {"type": "tms", "url": "https://hedgehoglabqa.testrail.io/index.php?/cases/view/58360", "name": "C58360"}, {"type": "tms", "url": "https://hedgehoglabqa.testrail.io/index.php?/cases/view/58359", "name": "C58359"}, {"type": "tms", "url": "https://hedgehoglabqa.testrail.io/index.php?/cases/view/58357", "name": "C58357"}, {"type": "tms", "url": "https://hedgehoglabqa.testrail.io/index.php?/cases/view/58356", "name": "C58356"}, {"type": "tms", "url": "https://hedgehoglabqa.testrail.io/index.php?/cases/view/58355", "name": "C58355"}, {"type": "issue", "url": "https://hedgehog-lab.atlassian.net/browse/QP-356", "name": "Epic QP-356"}, {"type": "issue", "url": "https://hedgehog-lab.atlassian.net/browse/QP-263", "name": "Story QP-263"}]}