{"name": "Saved site icon on site cards", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <Tests.test_Sites.TestSites object at 0x1038547d0>\ndriver = <selenium.webdriver.safari.webdriver.WebDriver (session=\"32898593-29F6-4EE4-A823-3E587F2276B3\")>\nsite_type = 'Historic'\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('Sites')\n    @allure.title(\"Saved site icon on site cards\")\n    @allure.issue(\"QP-383\", \"Story QP-383\")\n    @allure.issue(\"QP-356\", \"Epic QP-356\")\n    @allure.testcase(\"58742\", \"C58742\")\n    @pytest.mark.parametrize('site_type', [\"Historic\", \"Retail\"])\n    def test_15(self, driver, site_type):\n        sites_obj = Sites(driver)\n        sites_obj.click_site_tab_button(site_type)\n        site_list = self.site_list\n        saved_sites_titles = []\n        for site_id, site in self.saved_sites.items():\n            saved_sites_titles.append(site[\"title\"].strip())\n        filtered_site = split_historic_and_retail_sites(site_list, site_type)\n        num = 1\n        for site_id, site in filtered_site.items():\n            title = site[\"title\"].strip()\n            if title in saved_sites_titles:\n                with check, allure.step(\"C58742: Site card has a saved site icon\"):\n                    assert sites_obj.is_saved_site_icon_visible(site_type, title)\n            else:\n                with check, allure.step(\"C58742: Site card does not have a saved site icon\"):\n>                   assert not sites_obj.is_saved_site_icon_visible(site_type, title)\n\nTests/test_Sites.py:353: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages/SitesPage.py:154: in is_saved_site_icon_visible\n    icon = self.driver.find_elements(By.XPATH,\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:771: in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x102c8fa90>\nresponse = {'status': 408, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException"}, "steps": [{"name": "C58742: Site card does not have a saved site icon", "status": "passed", "start": 1734076798297, "stop": 1734076808280}, {"name": "C58742: Site card does not have a saved site icon", "status": "passed", "start": 1734076808281, "stop": 1734076818295}, {"name": "C58742: Site card has a saved site icon", "status": "passed", "start": 1734076818295, "stop": 1734076818305}, {"name": "C58742: Site card does not have a saved site icon", "status": "passed", "start": 1734076818305, "stop": 1734076828295}, {"name": "C58742: Site card does not have a saved site icon", "status": "passed", "start": 1734076828295, "stop": 1734076838273}, {"name": "C58742: Site card does not have a saved site icon", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Tests/test_Sites.py\", line 353, in test_15\n    assert not sites_obj.is_saved_site_icon_visible(site_type, title)\n  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Pages/SitesPage.py\", line 154, in is_saved_site_icon_visible\n    icon = self.driver.find_elements(By.XPATH,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 771, in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1734076838273, "stop": 1734076848808}], "parameters": [{"name": "site_type", "value": "'Historic'"}, {"name": "driver", "value": "'safari'"}], "start": 1734076798270, "stop": 1734076848822, "uuid": "fd410554-01af-4013-8be6-52dcf40fa7e1", "historyId": "51df5ac076b4d6b185c3df0da957fd84", "testCaseId": "2c15ef8e1e3ad86fc30f9cca009762f6", "fullName": "Tests.test_Sites.TestSites#test_15", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "Sites"}, {"name": "tag", "value": "flaky(reruns=3, reruns_delay=1)"}, {"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_Sites"}, {"name": "subSuite", "value": "TestSites"}, {"name": "host", "value": "Mac-1734075083748.local"}, {"name": "thread", "value": "3017-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_Sites"}], "links": [{"type": "tms", "url": "https://hedgehoglabqa.testrail.io/index.php?/cases/view/58742", "name": "C58742"}, {"type": "issue", "url": "https://hedgehog-lab.atlassian.net/browse/QP-356", "name": "Epic QP-356"}, {"type": "issue", "url": "https://hedgehog-lab.atlassian.net/browse/QP-383", "name": "Story QP-383"}]}