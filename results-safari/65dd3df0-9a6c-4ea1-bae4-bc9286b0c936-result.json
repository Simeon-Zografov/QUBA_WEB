{"name": "Event carousel cards without events", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom unknown error: cannot find msedge binary\nStacktrace:\n0   msedgedriver                        0x0000000100f0e228 msedgedriver + 6914600\n1   msedgedriver                        0x0000000100f0629a msedgedriver + 6881946\n2   msedgedriver                        0x00000001008cc67c msedgedriver + 353916\n3   msedgedriver                        0x00000001008fcd89 msedgedriver + 552329\n4   msedgedriver                        0x00000001008f8590 msedgedriver + 533904\n5   msedgedriver                        0x000000010093b4b3 msedgedriver + 808115\n6   msedgedriver                        0x000000010093a93f msedgedriver + 805183\n7   msedgedriver                        0x0000000100930983 msedgedriver + 764291\n8   msedgedriver                        0x000000010090485b msedgedriver + 583771\n9   msedgedriver                        0x00000001009051ae msedgedriver + 586158\n10  msedgedriver                        0x0000000100ed1ed2 msedgedriver + 6667986\n11  msedgedriver                        0x0000000100ed61af msedgedriver + 6685103\n12  msedgedriver                        0x0000000100eb16f9 msedgedriver + 6534905\n13  msedgedriver                        0x0000000100ed69a1 msedgedriver + 6687137\n14  msedgedriver                        0x0000000100ea1433 msedgedriver + 6468659\n15  msedgedriver                        0x0000000100ef4c08 msedgedriver + 6810632\n16  msedgedriver                        0x0000000100ef4d73 msedgedriver + 6810995\n17  msedgedriver                        0x0000000100f05e5a msedgedriver + 6880858\n18  libsystem_pthread.dylib             0x00007ff802cc018b _pthread_start + 99\n19  libsystem_pthread.dylib             0x00007ff802cbbae3 thread_start + 15", "trace": "self = <Tests.test_HomePage.TestHomePage object at 0x1067ca3d0>\nrequest = <SubRequest 'proxy_driver' for <Function test_29[home_page_test_29-safari]>>\n\n    @pytest.fixture(scope=\"function\", autouse=False)\n    def proxy_driver(self, request):\n        browser = request.node.callspec.params[\"driver\"]\n        test_name = request.param\n        print(browser)\n        print(test_name)\n        # browser = getattr(request, \"param\", None)\n        project_folder = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n        mitmdump_path = shutil.which(\"mitmdump\")\n        script_path = os.path.join(project_folder, \"Common\", \"ResponseInterception.py\")\n        print(\"Proxy fixture started\")\n    \n        if mitmdump_path is None:\n            raise FileNotFoundError(\"mitmdump executable not found in PATH. Please ensure mitmproxy is installed.\")\n        if browser == \"chrome\":\n            port = \"8082\"\n        elif browser == \"edge\":\n            port = \"8084\"\n        else:\n            port = \"8081\"\n        # port = \"8082\"\n        mitmdump_process = subprocess.Popen([mitmdump_path, \"-s\", script_path, \"--listen-port\", port,\n                                             \"--set\", f\"test_name={test_name}\"])\n        print(\"Proxy subprocess started\")\n        if browser == \"chrome\":\n            chrome_driver_path = os.path.join(project_folder, 'Resources', 'chromedriver')\n            options = webdriver.ChromeOptions()\n            options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')  # mitmproxy default proxy\n            options.add_argument('--ignore-certificate-errors')  # Bypass cert errors if needed for testing\n    \n            serv = ChromeService(chrome_driver_path)\n            proxy_driver = webdriver.Chrome(service=serv, options=options)\n        else:\n            options = webdriver.EdgeOptions()\n            options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')  # mitmproxy default proxy\n            options.add_argument('--ignore-certificate-errors')  # Bypass cert errors if needed for testing\n    \n>           proxy_driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)\n\nCommon/BaseClass.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/edge/webdriver.py:45: in __init__\n    super().__init__(\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py:61: in __init__\n    super().__init__(command_executor=executor, options=options)\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:208: in __init__\n    self.start_session(capabilities)\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x107199210>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom unknown error:...7ff802cc018b _pthread_start + 99\\\\n19  libsystem_pthread.dylib             0x00007ff802cbbae3 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from unknown error: cannot find msedge binary\nE       Stacktrace:\nE       0   msedgedriver                        0x0000000100f0e228 msedgedriver + 6914600\nE       1   msedgedriver                        0x0000000100f0629a msedgedriver + 6881946\nE       2   msedgedriver                        0x00000001008cc67c msedgedriver + 353916\nE       3   msedgedriver                        0x00000001008fcd89 msedgedriver + 552329\nE       4   msedgedriver                        0x00000001008f8590 msedgedriver + 533904\nE       5   msedgedriver                        0x000000010093b4b3 msedgedriver + 808115\nE       6   msedgedriver                        0x000000010093a93f msedgedriver + 805183\nE       7   msedgedriver                        0x0000000100930983 msedgedriver + 764291\nE       8   msedgedriver                        0x000000010090485b msedgedriver + 583771\nE       9   msedgedriver                        0x00000001009051ae msedgedriver + 586158\nE       10  msedgedriver                        0x0000000100ed1ed2 msedgedriver + 6667986\nE       11  msedgedriver                        0x0000000100ed61af msedgedriver + 6685103\nE       12  msedgedriver                        0x0000000100eb16f9 msedgedriver + 6534905\nE       13  msedgedriver                        0x0000000100ed69a1 msedgedriver + 6687137\nE       14  msedgedriver                        0x0000000100ea1433 msedgedriver + 6468659\nE       15  msedgedriver                        0x0000000100ef4c08 msedgedriver + 6810632\nE       16  msedgedriver                        0x0000000100ef4d73 msedgedriver + 6810995\nE       17  msedgedriver                        0x0000000100f05e5a msedgedriver + 6880858\nE       18  libsystem_pthread.dylib             0x00007ff802cc018b _pthread_start + 99\nE       19  libsystem_pthread.dylib             0x00007ff802cbbae3 thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException"}, "attachments": [{"name": "stdout", "source": "9aa481df-44d6-4be8-80cc-473cea47c7e6-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "43d63b24-6002-44e1-883f-d78a5defe85c-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "proxy_driver", "value": "'home_page_test_29'"}, {"name": "driver", "value": "'safari'"}], "start": 1731480656024, "stop": 1731480656024, "uuid": "463f16d0-4d11-43c6-af84-a8c6ed49f9a0", "historyId": "e1b4ca7db85b02278babbbddd6f34ac6", "testCaseId": "9ba0cf062138dca41ea0f8f7ddeb2719", "fullName": "Tests.test_HomePage.TestHomePage#test_29", "labels": [{"name": "feature", "value": "Home page"}, {"name": "severity", "value": "normal"}, {"name": "tag", "value": "flaky(reruns=3, reruns_delay=1)"}, {"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_HomePage"}, {"name": "subSuite", "value": "TestHomePage"}, {"name": "host", "value": "Mac-1731479841685.local"}, {"name": "thread", "value": "2029-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_HomePage"}], "links": [{"type": "tms", "url": "https://hedgehoglabqa.testrail.io/index.php?/cases/view/58610", "name": "C58610"}, {"type": "issue", "url": "https://hedgehog-lab.atlassian.net/browse/QP-356", "name": "Epic QP-356"}, {"type": "issue", "url": "https://hedgehog-lab.atlassian.net/browse/QP-269", "name": "Story QP-269"}]}