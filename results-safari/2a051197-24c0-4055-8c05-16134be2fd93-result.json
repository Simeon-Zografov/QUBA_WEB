{"name": "Event carousel cards without events", "status": "broken", "statusDetails": {"message": "AttributeError: 'NoneType' object has no attribute 'implicitly_wait'", "trace": "self = <Tests.test_HomePage.TestHomePage object at 0x1069e6850>\nrequest = <SubRequest 'proxy_driver' for <Function test_29[home_page_test_29-safari]>>\n\n    @pytest.fixture(scope=\"function\", autouse=False)\n    def proxy_driver(self, request):\n        browser = request.node.callspec.params[\"driver\"]\n        test_name = request.param\n        print(browser)\n        print(test_name)\n        # browser = getattr(request, \"param\", None)\n        project_folder = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n        mitmdump_path = shutil.which(\"mitmdump\")\n        script_path = os.path.join(project_folder, \"Common\", \"ResponseInterception.py\")\n        print(\"Proxy fixture started\")\n    \n        if mitmdump_path is None:\n            raise FileNotFoundError(\"mitmdump executable not found in PATH. Please ensure mitmproxy is installed.\")\n        if browser == \"chrome\":\n            port = \"8082\"\n        elif browser == \"edge\":\n            port = \"8084\"\n        else:\n            port = \"8081\"\n        # port = \"8082\"\n        mitmdump_process = subprocess.Popen([mitmdump_path, \"-s\", script_path, \"--listen-port\", port,\n                                             \"--set\", f\"test_name={test_name}\"])\n        print(\"Proxy subprocess started\")\n        if os.getenv('CI') == 'true':\n            if browser == \"chrome\":\n                options = ChromeOptions()\n                options.add_argument(\"--headless\")\n                options.add_argument(\"--disable-gpu\")\n                options.add_argument(\"--no-sandbox\")\n                options.add_argument(\"--disable-dev-shm-usage\")\n                options.add_argument(\"--disable-extensions\")\n                options.add_argument(\"--disable-infobars\")\n                options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')\n                options.add_argument('--ignore-certificate-errors')\n                chrome_driver_path = \"/usr/bin/chromedriver\"\n                serv = ChromeService(chrome_driver_path)\n                proxy_driver = webdriver.Chrome(service=serv, options=options)\n            elif browser == \"edge\":\n                options = EdgeOptions()\n                options.add_argument(\"--headless\")\n                options.add_argument(\"--disable-gpu\")\n                options.add_argument(\"--no-sandbox\")\n                options.add_argument(\"--disable-dev-shm-usage\")\n                options.add_argument(\"--disable-extensions\")\n                options.add_argument(\"--disable-infobars\")\n                options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')\n                options.add_argument('--ignore-certificate-errors')\n                serv = EdgeService(EdgeChromiumDriverManager().install())\n                proxy_driver = webdriver.Edge(service=serv, options=options)\n            else:\n                proxy_driver = None\n                print(\"Unsupported on the browser\")\n        else:\n            if browser == \"chrome\":\n                chrome_driver_path = os.path.join(project_folder, 'Resources', 'chromedriver')\n                options = webdriver.ChromeOptions()\n                options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')  # mitmproxy default proxy\n                options.add_argument('--ignore-certificate-errors')  # Bypass cert errors if needed for testing\n    \n                serv = ChromeService(chrome_driver_path)\n                proxy_driver = webdriver.Chrome(service=serv, options=options)\n            elif browser == \"edge\":\n                options = webdriver.EdgeOptions()\n                options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')  # mitmproxy default proxy\n                options.add_argument('--ignore-certificate-errors')  # Bypass cert errors if needed for testing\n    \n                proxy_driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)\n            else:\n                proxy_driver = None\n                print(\"Unsupported on the browser\")\n            # elif browser == \"firefox\":\n            #     options = FirefoxOptions()\n            #     # firefox_profile = webdriver.FirefoxProfile()\n            #     # Specify to use manual proxy configuration.\n            #     options.set_preference('network.proxy.type', 1)\n            #     # Set the host/port.\n            #     options.set_preference('network.proxy.http', 'http://127.0.0.1')\n            #     options.set_preference('network.proxy.https_port', port)\n            #     options.set_preference('network.proxy.ssl', 'http://127.0.0.1')\n            #     options.set_preference('network.proxy.ssl_port', port)\n            #     # options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')\n            #     # options.set_preference(\"security.enterprise_roots.enabled\", True)\n            #     # options.set_preference(\"network.proxy.allow_hijacking_localhost\", True)\n            #     # options.set_preference(\"devtools.console.stdout.content\", True)\n            #\n            #     proxy_driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)\n            # else:\n            #     options = SafariOptions()\n            #     options.page_load_strategy = 'eager'\n            #     proxy_driver = webdriver.Safari(options=options)\n        print(\"Proxy driver created\")\n>       proxy_driver.implicitly_wait(10)\nE       AttributeError: 'NoneType' object has no attribute 'implicitly_wait'\n\nCommon/BaseClass.py:203: AttributeError"}, "attachments": [{"name": "stdout", "source": "52731cc2-5174-464b-b9a8-5fe231c05832-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "proxy_driver", "value": "'home_page_test_29'"}, {"name": "driver", "value": "'safari'"}], "start": 1731482628902, "stop": 1731482628902, "uuid": "aba706a9-3c22-45b4-b6c1-80937870ae0c", "historyId": "e1b4ca7db85b02278babbbddd6f34ac6", "testCaseId": "9ba0cf062138dca41ea0f8f7ddeb2719", "fullName": "Tests.test_HomePage.TestHomePage#test_29", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "Home page"}, {"name": "tag", "value": "flaky(reruns=3, reruns_delay=1)"}, {"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_HomePage"}, {"name": "subSuite", "value": "TestHomePage"}, {"name": "host", "value": "Mac-1731481322631.local"}, {"name": "thread", "value": "3978-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_HomePage"}], "links": [{"type": "tms", "url": "https://hedgehoglabqa.testrail.io/index.php?/cases/view/58610", "name": "C58610"}, {"type": "issue", "url": "https://hedgehog-lab.atlassian.net/browse/QP-356", "name": "Epic QP-356"}, {"type": "issue", "url": "https://hedgehog-lab.atlassian.net/browse/QP-269", "name": "Story QP-269"}]}