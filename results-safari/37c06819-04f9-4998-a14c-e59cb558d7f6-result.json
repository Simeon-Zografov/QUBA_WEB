{"name": "Check Retail sites", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchFrameException: Message:", "trace": "self = <Tests.test_Sites.TestSites object at 0x103e2d1d0>\ndriver = <selenium.webdriver.safari.webdriver.WebDriver (session=\"FF1B25DF-AE0A-46DD-95F6-6A202C0A9FFC\")>\nsite_type = 'Retail'\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('Sites')\n    @allure.title(\"Check {site_type} sites\")\n    @pytest.mark.parametrize('site_type', [\"Historic\", \"Retail\"])\n    def test_3(self, driver, site_type):\n        sites_obj = Sites(driver)\n        sites_obj.click_site_tab_button(site_type)\n        site_list = self.site_list\n        site_number = get_site_number(site_list, site_type)\n        site_card_number = sites_obj.get_site_cards_number(site_type)\n        filtered_site = split_historic_and_retail_sites(site_list, site_type)\n        if site_number > 9:\n            with check, allure.step(\"Nine cards are visible on the page\"):\n                assert site_card_number == 9\n            with check, allure.step(\"Pagination is visible\"):\n                assert sites_obj.is_pagination_visible(site_type)\n        else:\n            with check, allure.step(\"The number of cards are visible on the page is correct\"):\n                assert site_card_number == site_number\n            with check, allure.step(\"Pagination is not visible\"):\n>               assert not sites_obj.is_pagination_visible(site_type)\n\nTests/test_Sites.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages/SitesPage.py:74: in is_pagination_visible\n    element_list = self.driver.find_elements(By.XPATH, f\"//div[@id='{site_type}']//ul[@aria-label='Pagination']\")\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:771: in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1059cd450>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such frame\",\"message\":\"\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchFrameException: Message:\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchFrameException"}, "steps": [{"name": "The number of cards are visible on the page is correct", "status": "passed", "start": 1730384242995, "stop": 1730384242995}, {"name": "Pagination is not visible", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchFrameException: Message: \n\n", "trace": "  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Tests/test_Sites.py\", line 65, in test_3\n    assert not sites_obj.is_pagination_visible(site_type)\n  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Pages/SitesPage.py\", line 74, in is_pagination_visible\n    element_list = self.driver.find_elements(By.XPATH, f\"//div[@id='{site_type}']//ul[@aria-label='Pagination']\")\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 771, in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1730384242995, "stop": 1730384243381}], "parameters": [{"name": "site_type", "value": "'Retail'"}, {"name": "driver", "value": "'safari'"}], "start": 1730384242848, "stop": 1730384243392, "uuid": "db13eacc-3583-4197-a2ec-45de02e0f9fd", "historyId": "d3774ae400b40bca5cb120c3e2bddd4a", "testCaseId": "fdc21160f73623f8e24c2a6119e2154d", "fullName": "Tests.test_Sites.TestSites#test_3", "labels": [{"name": "feature", "value": "Sites"}, {"name": "severity", "value": "normal"}, {"name": "tag", "value": "flaky(reruns=3, reruns_delay=0.5, rerun_except='assert')"}, {"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_Sites"}, {"name": "subSuite", "value": "TestSites"}, {"name": "host", "value": "Mac-1730383937177.local"}, {"name": "thread", "value": "1239-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_Sites"}]}