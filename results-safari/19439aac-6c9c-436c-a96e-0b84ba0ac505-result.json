{"name": "Events section appearance", "status": "failed", "statusDetails": {"message": "AssertionError: FAILURE: assert 9 == 4\n +  where 9 = <bound method Events.get_event_cards_number of <Pages.EventsPage.Events object at 0x1027a0f90>>()\n +    where <bound method Events.get_event_cards_number of <Pages.EventsPage.Events object at 0x1027a0f90>> = <Pages.EventsPage.Events object at 0x1027a0f90>.get_event_cards_number\ntest_Events.py:95 in test_4() -> with check, allure.step(\"C58456: The number of cards are visible on the page is correct\"):\ntest_Events.py:96 in test_4 -> assert events_obj.get_event_cards_number() == expected_card_number\nAssertionError: assert 9 == 4\n +  where 9 = <bound method Events.get_event_cards_number of <Pages.EventsPage.Events object at 0x1027a0f90>>()\n +    where <bound method Events.get_event_cards_number of <Pages.EventsPage.Events object at 0x1027a0f90>> = <Pages.EventsPage.Events object at 0x1027a0f90>.get_event_cards_number\n\n\nFAILURE: assert not True\n +  where True = <bound method Events.is_pagination_visible of <Pages.EventsPage.Events object at 0x1027a0f90>>()\n +    where <bound method Events.is_pagination_visible of <Pages.EventsPage.Events object at 0x1027a0f90>> = <Pages.EventsPage.Events object at 0x1027a0f90>.is_pagination_visible\nFAILURE: assert False\n +  where False = <bound method Events.is_event_card_visible_by_title of <Pages.EventsPage.Events object at 0x1027a0f90>>(' نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م')\n +    where <bound method Events.is_event_card_visible_by_title of <Pages.EventsPage.Events object at 0x1027a0f90>> = <Pages.EventsPage.Events object at 0x1027a0f90>.is_event_card_visible_by_title\nFAILURE: assert 'Leverage synergies' == 'نتيجة لظروف ...فيما نتحمله م'\n  \n  - نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م\n  + Leverage synergies\nFAILURE: assert 'Sed felis mi...acerat a odio' == 'نتيجة لظروف ...فيما نتحمله م'\n  \n  - نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م\n  + Sed felis mi, bibendum vel fringilla ac, placerat a odio\nFAILURE: assert False\n +  where False = <bound method Events.is_event_card_visible_by_title of <Pages.EventsPage.Events object at 0x1027a0f90>>('  الألم الذي ربما تنجم عنه بعض ا.')\n +    where <bound method Events.is_event_card_visible_by_title of <Pages.EventsPage.Events object at 0x1027a0f90>> = <Pages.EventsPage.Events object at 0x1027a0f90>.is_event_card_visible_by_title\nFAILURE: assert 'Sunshine summer fest 2024' == 'الألم الذي ر...جم عنه بعض ا.'\n  \n  - الألم الذي ربما تنجم عنه بعض ا.\n  + Sunshine summer fest 2024\nFAILURE: assert 'Join us for ...unity spirit!' == 'نتيجة لظروف ...فيما نتحمله م'\n  \n  - نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م\n  + Join us for the annual Sunshine Summer Fest, a day filled with music, food, fun activities, and community spirit!\nFAILURE: assert 'f651694466df...f5a83c_t.jpeg' == 'images (1).jpeg'\n  \n  - images (1).jpeg\n  + f651694466dfc7dac4c5119e59f5a83c_t.jpeg\nFAILURE: assert '9 October, 6... 10:00pm AST)' == '1 December, ..., 3:15pm AST)'\n  \n  - 1 December, 11:00am - 28 December, 12:15pm (1 December, 2:00pm - 28 December, 3:15pm AST)\n  + 9 October, 6:00pm - 1 December, 7:00pm (9 October, 8:00pm - 1 December, 10:00pm AST)\nFAILURE: assert False\n +  where False = <bound method Events.is_event_card_visible_by_title of <Pages.EventsPage.Events object at 0x1027a0f90>>(' نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م')\n +    where <bound method Events.is_event_card_visible_by_title of <Pages.EventsPage.Events object at 0x1027a0f90>> = <Pages.EventsPage.Events object at 0x1027a0f90>.is_event_card_visible_by_title\nFAILURE: assert 'Tour of Old Maidnah' == 'نتيجة لظروف ...فيما نتحمله م'\n  \n  - نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م\n  + Tour of Old Maidnah\nFAILURE: assert 'Join us for ...f Old Maidnah' == 'الألم الذي ر...جم عنه بعض ا.'\n  \n  - الألم الذي ربما تنجم عنه بعض ا.\n  + Join us for an insightful tour of Old Maidnah\nFAILURE: assert 'istockphoto-...8-612x612.jpg' == 'Shell-Logo-Design.webp'\n  \n  - Shell-Logo-Design.webp\n  + istockphoto-476129138-612x612.jpg\nFAILURE: assert '25 November,..., 3:15pm AST)' == '2 December, ... 10:30am AST)'\n  \n  - 2 December, 7:00am - 11 February, 7:30am (2 December, 10:00am - 11 February, 10:30am AST)\n  + 25 November, 10:05pm - 8 January, 12:15pm (26 November, 1:05am - 8 January, 3:15pm AST)\n------------------------------------------------------------\nFailed Checks: 15\n------------------------------------------------------------\nself = <Tests.test_Events.TestEvents object at 0x102c23650>\ndriver = <selenium.webdriver.safari.webdriver.WebDriver (session=\"D464C50E-254F-443C-9E88-484EB2E5EDF0\")>\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('Events')\n    @allure.title(\"Events section appearance\")\n    @allure.issue(\"QP-267\", \"Story QP-267\")\n    @allure.issue(\"QP-356\", \"Epic QP-356\")\n    @allure.testcase(\"58456\", \"C58456\")\n    @allure.testcase(\"58468\", \"C58468\")\n    @allure.testcase(\"58457\", \"C58457\")\n    @allure.testcase(\"58458\", \"C58458\")\n    @pytest.mark.dependency(depends=[\"test_1\"])\n    def test_4(self, driver):\n        events_obj = Events(driver)\n        events_obj.scroll_to_events_section()\n        expected_card_number = len(list(self.event_list.keys()))\n        if expected_card_number > 9:\n            with check, allure.step(\"C58456: Nine cards are visible on the page\"):\n                assert events_obj.get_event_cards_number() == 9\n            with check, allure.step(\"C58468: Pagination is visible\"):\n                assert events_obj.is_pagination_visible()\n        else:\n            with check, allure.step(\"C58456: The number of cards are visible on the page is correct\"):\n                assert events_obj.get_event_cards_number() == expected_card_number\n            with check, allure.step(\"C58468: Pagination is not visible\"):\n                assert not events_obj.is_pagination_visible()\n        num = 1\n        for event_id, event in self.event_list.items():\n            with check, allure.step(f\"C58456: {event['title']} is displayed\"):\n>               assert events_obj.is_event_card_visible_by_title(event['title'])\n\nTests/test_Events.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages/EventsPage.py:90: in is_event_card_visible_by_title\n    card = self.driver.find_elements(By.XPATH, self.event_card_by_title.format(title=title))\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:771: in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1033c3e90>\nresponse = {'status': 408, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException", "trace": "FAILURE: assert 9 == 4\n +  where 9 = <bound method Events.get_event_cards_number of <Pages.EventsPage.Events object at 0x1027a0f90>>()\n +    where <bound method Events.get_event_cards_number of <Pages.EventsPage.Events object at 0x1027a0f90>> = <Pages.EventsPage.Events object at 0x1027a0f90>.get_event_cards_number\ntest_Events.py:95 in test_4() -> with check, allure.step(\"C58456: The number of cards are visible on the page is correct\"):\ntest_Events.py:96 in test_4 -> assert events_obj.get_event_cards_number() == expected_card_number\nAssertionError: assert 9 == 4\n +  where 9 = <bound method Events.get_event_cards_number of <Pages.EventsPage.Events object at 0x1027a0f90>>()\n +    where <bound method Events.get_event_cards_number of <Pages.EventsPage.Events object at 0x1027a0f90>> = <Pages.EventsPage.Events object at 0x1027a0f90>.get_event_cards_number\n\n\nFAILURE: assert not True\n +  where True = <bound method Events.is_pagination_visible of <Pages.EventsPage.Events object at 0x1027a0f90>>()\n +    where <bound method Events.is_pagination_visible of <Pages.EventsPage.Events object at 0x1027a0f90>> = <Pages.EventsPage.Events object at 0x1027a0f90>.is_pagination_visible\nFAILURE: assert False\n +  where False = <bound method Events.is_event_card_visible_by_title of <Pages.EventsPage.Events object at 0x1027a0f90>>(' نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م')\n +    where <bound method Events.is_event_card_visible_by_title of <Pages.EventsPage.Events object at 0x1027a0f90>> = <Pages.EventsPage.Events object at 0x1027a0f90>.is_event_card_visible_by_title\nFAILURE: assert 'Leverage synergies' == 'نتيجة لظروف ...فيما نتحمله م'\n  \n  - نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م\n  + Leverage synergies\nFAILURE: assert 'Sed felis mi...acerat a odio' == 'نتيجة لظروف ...فيما نتحمله م'\n  \n  - نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م\n  + Sed felis mi, bibendum vel fringilla ac, placerat a odio\nFAILURE: assert False\n +  where False = <bound method Events.is_event_card_visible_by_title of <Pages.EventsPage.Events object at 0x1027a0f90>>('  الألم الذي ربما تنجم عنه بعض ا.')\n +    where <bound method Events.is_event_card_visible_by_title of <Pages.EventsPage.Events object at 0x1027a0f90>> = <Pages.EventsPage.Events object at 0x1027a0f90>.is_event_card_visible_by_title\nFAILURE: assert 'Sunshine summer fest 2024' == 'الألم الذي ر...جم عنه بعض ا.'\n  \n  - الألم الذي ربما تنجم عنه بعض ا.\n  + Sunshine summer fest 2024\nFAILURE: assert 'Join us for ...unity spirit!' == 'نتيجة لظروف ...فيما نتحمله م'\n  \n  - نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م\n  + Join us for the annual Sunshine Summer Fest, a day filled with music, food, fun activities, and community spirit!\nFAILURE: assert 'f651694466df...f5a83c_t.jpeg' == 'images (1).jpeg'\n  \n  - images (1).jpeg\n  + f651694466dfc7dac4c5119e59f5a83c_t.jpeg\nFAILURE: assert '9 October, 6... 10:00pm AST)' == '1 December, ..., 3:15pm AST)'\n  \n  - 1 December, 11:00am - 28 December, 12:15pm (1 December, 2:00pm - 28 December, 3:15pm AST)\n  + 9 October, 6:00pm - 1 December, 7:00pm (9 October, 8:00pm - 1 December, 10:00pm AST)\nFAILURE: assert False\n +  where False = <bound method Events.is_event_card_visible_by_title of <Pages.EventsPage.Events object at 0x1027a0f90>>(' نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م')\n +    where <bound method Events.is_event_card_visible_by_title of <Pages.EventsPage.Events object at 0x1027a0f90>> = <Pages.EventsPage.Events object at 0x1027a0f90>.is_event_card_visible_by_title\nFAILURE: assert 'Tour of Old Maidnah' == 'نتيجة لظروف ...فيما نتحمله م'\n  \n  - نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م\n  + Tour of Old Maidnah\nFAILURE: assert 'Join us for ...f Old Maidnah' == 'الألم الذي ر...جم عنه بعض ا.'\n  \n  - الألم الذي ربما تنجم عنه بعض ا.\n  + Join us for an insightful tour of Old Maidnah\nFAILURE: assert 'istockphoto-...8-612x612.jpg' == 'Shell-Logo-Design.webp'\n  \n  - Shell-Logo-Design.webp\n  + istockphoto-476129138-612x612.jpg\nFAILURE: assert '25 November,..., 3:15pm AST)' == '2 December, ... 10:30am AST)'\n  \n  - 2 December, 7:00am - 11 February, 7:30am (2 December, 10:00am - 11 February, 10:30am AST)\n  + 25 November, 10:05pm - 8 January, 12:15pm (26 November, 1:05am - 8 January, 3:15pm AST)\n------------------------------------------------------------\nFailed Checks: 15\n------------------------------------------------------------\nself = <Tests.test_Events.TestEvents object at 0x102c23650>\ndriver = <selenium.webdriver.safari.webdriver.WebDriver (session=\"D464C50E-254F-443C-9E88-484EB2E5EDF0\")>\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('Events')\n    @allure.title(\"Events section appearance\")\n    @allure.issue(\"QP-267\", \"Story QP-267\")\n    @allure.issue(\"QP-356\", \"Epic QP-356\")\n    @allure.testcase(\"58456\", \"C58456\")\n    @allure.testcase(\"58468\", \"C58468\")\n    @allure.testcase(\"58457\", \"C58457\")\n    @allure.testcase(\"58458\", \"C58458\")\n    @pytest.mark.dependency(depends=[\"test_1\"])\n    def test_4(self, driver):\n        events_obj = Events(driver)\n        events_obj.scroll_to_events_section()\n        expected_card_number = len(list(self.event_list.keys()))\n        if expected_card_number > 9:\n            with check, allure.step(\"C58456: Nine cards are visible on the page\"):\n                assert events_obj.get_event_cards_number() == 9\n            with check, allure.step(\"C58468: Pagination is visible\"):\n                assert events_obj.is_pagination_visible()\n        else:\n            with check, allure.step(\"C58456: The number of cards are visible on the page is correct\"):\n                assert events_obj.get_event_cards_number() == expected_card_number\n            with check, allure.step(\"C58468: Pagination is not visible\"):\n                assert not events_obj.is_pagination_visible()\n        num = 1\n        for event_id, event in self.event_list.items():\n            with check, allure.step(f\"C58456: {event['title']} is displayed\"):\n>               assert events_obj.is_event_card_visible_by_title(event['title'])\n\nTests/test_Events.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages/EventsPage.py:90: in is_event_card_visible_by_title\n    card = self.driver.find_elements(By.XPATH, self.event_card_by_title.format(title=title))\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:771: in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1033c3e90>\nresponse = {'status': 408, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException"}, "steps": [{"name": "C58456: The number of cards are visible on the page is correct", "status": "failed", "statusDetails": {"message": "AssertionError: assert 9 == 4\n +  where 9 = <bound method Events.get_event_cards_number of <Pages.EventsPage.Events object at 0x1027a0f90>>()\n +    where <bound method Events.get_event_cards_number of <Pages.EventsPage.Events object at 0x1027a0f90>> = <Pages.EventsPage.Events object at 0x1027a0f90>.get_event_cards_number\n", "trace": "  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Tests/test_Events.py\", line 96, in test_4\n    assert events_obj.get_event_cards_number() == expected_card_number\n"}, "start": 1734073369628, "stop": 1734073369642}, {"name": "C58468: Pagination is not visible", "status": "failed", "statusDetails": {"message": "AssertionError: assert not True\n +  where True = <bound method Events.is_pagination_visible of <Pages.EventsPage.Events object at 0x1027a0f90>>()\n +    where <bound method Events.is_pagination_visible of <Pages.EventsPage.Events object at 0x1027a0f90>> = <Pages.EventsPage.Events object at 0x1027a0f90>.is_pagination_visible\n", "trace": "  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Tests/test_Events.py\", line 98, in test_4\n    assert not events_obj.is_pagination_visible()\n"}, "start": 1734073369651, "stop": 1734073369658}, {"name": "C58456:  نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م is displayed", "status": "failed", "statusDetails": {"message": "AssertionError: assert False\n +  where False = <bound method Events.is_event_card_visible_by_title of <Pages.EventsPage.Events object at 0x1027a0f90>>(' نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م')\n +    where <bound method Events.is_event_card_visible_by_title of <Pages.EventsPage.Events object at 0x1027a0f90>> = <Pages.EventsPage.Events object at 0x1027a0f90>.is_event_card_visible_by_title\n", "trace": "  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Tests/test_Events.py\", line 102, in test_4\n    assert events_obj.is_event_card_visible_by_title(event['title'])\n"}, "start": 1734073369658, "stop": 1734073379634}, {"name": "C58457:  نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م title is visible", "status": "passed", "start": 1734073379637, "stop": 1734073379654}, {"name": "C58458:  نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م title is correct", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'Leverage synergies' == 'نتيجة لظروف ...فيما نتحمله م'\n  \n  - نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م\n  + Leverage synergies\n", "trace": "  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Tests/test_Events.py\", line 106, in test_4\n    assert events_obj.get_event_card_title_text(num).strip() == event[\"title\"].strip()\n"}, "start": 1734073379654, "stop": 1734073379661}, {"name": "C58457:  نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م description is visible", "status": "passed", "start": 1734073379661, "stop": 1734073379668}, {"name": "C58458:  نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م description is correct", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'Sed felis mi...acerat a odio' == 'نتيجة لظروف ...فيما نتحمله م'\n  \n  - نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م\n  + Sed felis mi, bibendum vel fringilla ac, placerat a odio\n", "trace": "  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Tests/test_Events.py\", line 110, in test_4\n    assert events_obj.get_event_card_description_text(num).strip() == event[\"summary\"].strip()\n"}, "start": 1734073379668, "stop": 1734073379672}, {"name": "C58457:  نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م image is visible", "status": "passed", "start": 1734073379673, "stop": 1734073379679}, {"name": "C58458:  نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م image is correct", "status": "passed", "start": 1734073379679, "stop": 1734073379685}, {"name": "C58457:  نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م date is visible", "status": "passed", "start": 1734073379685, "stop": 1734073379691}, {"name": "C58458:  نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م date is correct", "status": "passed", "start": 1734073379691, "stop": 1734073379696}, {"name": "C58456:   الألم الذي ربما تنجم عنه بعض ا. is displayed", "status": "failed", "statusDetails": {"message": "AssertionError: assert False\n +  where False = <bound method Events.is_event_card_visible_by_title of <Pages.EventsPage.Events object at 0x1027a0f90>>('  الألم الذي ربما تنجم عنه بعض ا.')\n +    where <bound method Events.is_event_card_visible_by_title of <Pages.EventsPage.Events object at 0x1027a0f90>> = <Pages.EventsPage.Events object at 0x1027a0f90>.is_event_card_visible_by_title\n", "trace": "  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Tests/test_Events.py\", line 102, in test_4\n    assert events_obj.is_event_card_visible_by_title(event['title'])\n"}, "start": 1734073379696, "stop": 1734073389714}, {"name": "C58457:   الألم الذي ربما تنجم عنه بعض ا. title is visible", "status": "passed", "start": 1734073389717, "stop": 1734073389734}, {"name": "C58458:   الألم الذي ربما تنجم عنه بعض ا. title is correct", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'Sunshine summer fest 2024' == 'الألم الذي ر...جم عنه بعض ا.'\n  \n  - الألم الذي ربما تنجم عنه بعض ا.\n  + Sunshine summer fest 2024\n", "trace": "  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Tests/test_Events.py\", line 106, in test_4\n    assert events_obj.get_event_card_title_text(num).strip() == event[\"title\"].strip()\n"}, "start": 1734073389734, "stop": 1734073389740}, {"name": "C58457:   الألم الذي ربما تنجم عنه بعض ا. description is visible", "status": "passed", "start": 1734073389740, "stop": 1734073389747}, {"name": "C58458:   الألم الذي ربما تنجم عنه بعض ا. description is correct", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'Join us for ...unity spirit!' == 'نتيجة لظروف ...فيما نتحمله م'\n  \n  - نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م\n  + Join us for the annual Sunshine Summer Fest, a day filled with music, food, fun activities, and community spirit!\n", "trace": "  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Tests/test_Events.py\", line 110, in test_4\n    assert events_obj.get_event_card_description_text(num).strip() == event[\"summary\"].strip()\n"}, "start": 1734073389747, "stop": 1734073389751}, {"name": "C58457:   الألم الذي ربما تنجم عنه بعض ا. image is visible", "status": "passed", "start": 1734073389752, "stop": 1734073389759}, {"name": "C58458:   الألم الذي ربما تنجم عنه بعض ا. image is correct", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'f651694466df...f5a83c_t.jpeg' == 'images (1).jpeg'\n  \n  - images (1).jpeg\n  + f651694466dfc7dac4c5119e59f5a83c_t.jpeg\n", "trace": "  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Tests/test_Events.py\", line 114, in test_4\n    assert events_obj.get_event_card_image(num) == event[\"image\"][0]\n"}, "start": 1734073389759, "stop": 1734073389765}, {"name": "C58457:   الألم الذي ربما تنجم عنه بعض ا. date is visible", "status": "passed", "start": 1734073389766, "stop": 1734073389773}, {"name": "C58458:   الألم الذي ربما تنجم عنه بعض ا. date is correct", "status": "failed", "statusDetails": {"message": "AssertionError: assert '9 October, 6... 10:00pm AST)' == '1 December, ..., 3:15pm AST)'\n  \n  - 1 December, 11:00am - 28 December, 12:15pm (1 December, 2:00pm - 28 December, 3:15pm AST)\n  + 9 October, 6:00pm - 1 December, 7:00pm (9 October, 8:00pm - 1 December, 10:00pm AST)\n", "trace": "  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Tests/test_Events.py\", line 119, in test_4\n    assert events_obj.get_event_card_date_text(num) == expected_time\n"}, "start": 1734073389773, "stop": 1734073389781}, {"name": "C58456:  نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م is displayed", "status": "failed", "statusDetails": {"message": "AssertionError: assert False\n +  where False = <bound method Events.is_event_card_visible_by_title of <Pages.EventsPage.Events object at 0x1027a0f90>>(' نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م')\n +    where <bound method Events.is_event_card_visible_by_title of <Pages.EventsPage.Events object at 0x1027a0f90>> = <Pages.EventsPage.Events object at 0x1027a0f90>.is_event_card_visible_by_title\n", "trace": "  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Tests/test_Events.py\", line 102, in test_4\n    assert events_obj.is_event_card_visible_by_title(event['title'])\n"}, "start": 1734073389782, "stop": 1734073399780}, {"name": "C58457:  نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م title is visible", "status": "passed", "start": 1734073399785, "stop": 1734073399818}, {"name": "C58458:  نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م title is correct", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'Tour of Old Maidnah' == 'نتيجة لظروف ...فيما نتحمله م'\n  \n  - نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م\n  + Tour of Old Maidnah\n", "trace": "  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Tests/test_Events.py\", line 106, in test_4\n    assert events_obj.get_event_card_title_text(num).strip() == event[\"title\"].strip()\n"}, "start": 1734073399818, "stop": 1734073399825}, {"name": "C58457:  نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م description is visible", "status": "passed", "start": 1734073399825, "stop": 1734073399832}, {"name": "C58458:  نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م description is correct", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'Join us for ...f Old Maidnah' == 'الألم الذي ر...جم عنه بعض ا.'\n  \n  - الألم الذي ربما تنجم عنه بعض ا.\n  + Join us for an insightful tour of Old Maidnah\n", "trace": "  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Tests/test_Events.py\", line 110, in test_4\n    assert events_obj.get_event_card_description_text(num).strip() == event[\"summary\"].strip()\n"}, "start": 1734073399832, "stop": 1734073399837}, {"name": "C58457:  نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م image is visible", "status": "passed", "start": 1734073399837, "stop": 1734073399843}, {"name": "C58458:  نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م image is correct", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'istockphoto-...8-612x612.jpg' == 'Shell-Logo-Design.webp'\n  \n  - Shell-Logo-Design.webp\n  + istockphoto-476129138-612x612.jpg\n", "trace": "  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Tests/test_Events.py\", line 114, in test_4\n    assert events_obj.get_event_card_image(num) == event[\"image\"][0]\n"}, "start": 1734073399843, "stop": 1734073399849}, {"name": "C58457:  نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م date is visible", "status": "passed", "start": 1734073399849, "stop": 1734073399855}, {"name": "C58458:  نتيجة لظروف ما قد تكمن السعاده فيما نتحمله م date is correct", "status": "failed", "statusDetails": {"message": "AssertionError: assert '25 November,..., 3:15pm AST)' == '2 December, ... 10:30am AST)'\n  \n  - 2 December, 7:00am - 11 February, 7:30am (2 December, 10:00am - 11 February, 10:30am AST)\n  + 25 November, 10:05pm - 8 January, 12:15pm (26 November, 1:05am - 8 January, 3:15pm AST)\n", "trace": "  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Tests/test_Events.py\", line 119, in test_4\n    assert events_obj.get_event_card_date_text(num) == expected_time\n"}, "start": 1734073399855, "stop": 1734073399860}, {"name": "C58456: الابتكارات في الفن والتكنولوجيا is displayed", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Tests/test_Events.py\", line 102, in test_4\n    assert events_obj.is_event_card_visible_by_title(event['title'])\n  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Pages/EventsPage.py\", line 90, in is_event_card_visible_by_title\n    card = self.driver.find_elements(By.XPATH, self.event_card_by_title.format(title=title))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 771, in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1734073399861, "stop": 1734073410395}], "parameters": [{"name": "driver", "value": "'safari'"}], "start": 1734073368462, "stop": 1734073410402, "uuid": "fefceba7-593d-44f6-8e54-550fa4b949aa", "historyId": "7f2f49f8d43201de6844a56be61ada27", "testCaseId": "4df572c82a1e14469fa8471c9941d335", "fullName": "Tests.test_Events.TestEvents#test_4", "labels": [{"name": "feature", "value": "Events"}, {"name": "severity", "value": "normal"}, {"name": "tag", "value": "dependency(depends=['test_1'])"}, {"name": "tag", "value": "flaky(reruns=3, reruns_delay=1)"}, {"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_Events"}, {"name": "subSuite", "value": "TestEvents"}, {"name": "host", "value": "Mac-1734071719163.local"}, {"name": "thread", "value": "2307-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_Events"}], "links": [{"type": "tms", "url": "https://hedgehoglabqa.testrail.io/index.php?/cases/view/58458", "name": "C58458"}, {"type": "tms", "url": "https://hedgehoglabqa.testrail.io/index.php?/cases/view/58457", "name": "C58457"}, {"type": "tms", "url": "https://hedgehoglabqa.testrail.io/index.php?/cases/view/58468", "name": "C58468"}, {"type": "tms", "url": "https://hedgehoglabqa.testrail.io/index.php?/cases/view/58456", "name": "C58456"}, {"type": "issue", "url": "https://hedgehog-lab.atlassian.net/browse/QP-356", "name": "Epic QP-356"}, {"type": "issue", "url": "https://hedgehog-lab.atlassian.net/browse/QP-267", "name": "Story QP-267"}]}