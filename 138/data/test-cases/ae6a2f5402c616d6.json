{"uid":"ae6a2f5402c616d6","name":"User is navigated to the Home page","fullName":"Tests.test_HomePage.TestHomePage#test_1","historyId":"b097188edbae089666c5accf3be86f07","time":{"start":1734004982217,"stop":1734004982217,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: MicrosoftEdge=131.0.2903.86)\nStacktrace:\n#0 0x55e56814394e <unknown>\n#1 0x55e567bf8b76 <unknown>\n#2 0x55e567be27ae <unknown>\n#3 0x55e567be2552 <unknown>\n#4 0x55e567be0a3b <unknown>\n#5 0x55e567be0e94 <unknown>\n#6 0x55e567bf5267 <unknown>\n#7 0x55e567c0527f <unknown>\n#8 0x55e567c0ab2b <unknown>\n#9 0x55e567be1485 <unknown>\n#10 0x55e567c04f10 <unknown>\n#11 0x55e567c87fd9 <unknown>\n#12 0x55e567c69f83 <unknown>\n#13 0x55e567c3a01e <unknown>\n#14 0x55e567c3acfe <unknown>\n#15 0x55e5681189e1 <unknown>\n#16 0x55e56811bbde <unknown>\n#17 0x55e56811b65b <unknown>\n#18 0x55e56811c005 <unknown>\n#19 0x55e56810a3f2 <unknown>\n#20 0x55e56811c38d <unknown>\n#21 0x55e5680f45b5 <unknown>\n#22 0x55e568134008 <unknown>\n#23 0x55e56813421f <unknown>\n#24 0x55e56814253c <unknown>\n#25 0x7f74f6c9ca94 <unknown>\n#26 0x7f74f6d29c3c <unknown>","statusTrace":"self = <Tests.test_HomePage.TestHomePage object at 0x7f7e3f36a790>\nrequest = <SubRequest 'driver' for <Function test_1[edge]>>\n\n    @pytest.fixture(scope=\"class\", autouse=True)\n    def driver(self, request):\n        browser = request.param\n        BaseClass.current_browser = browser\n        project_folder = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    \n        is_ci = os.getenv('CI') == 'true'\n        if is_ci:\n            if browser == \"edge\":\n                # Set up Edge options\n                options = EdgeOptions()\n                options.add_argument(\"--headless\")\n                options.add_argument(\"--disable-gpu\")\n                options.add_argument(\"--no-sandbox\")\n                options.add_argument(\"--disable-dev-shm-usage\")\n                options.add_argument(\"--disable-extensions\")\n                options.add_argument(\"--disable-infobars\")\n                serv = EdgeService(EdgeChromiumDriverManager().install())\n                driver = webdriver.Edge(service=serv, options=options)\n                download_dir = os.path.join(project_folder, 'Resources', 'edge_download_dir')\n                params = {\n                    \"behavior\": \"allow\",\n                    \"downloadPath\": download_dir\n                }\n>               driver.execute_cdp_cmd(\"Page.setDownloadBehavior\", params)\n\nCommon/BaseClass.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py:136: in execute_cdp_cmd\n    return self.execute(\"executeCdpCommand\", {\"cmd\": cmd, \"params\": cmd_args})[\"value\"]\n/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7e405d7a90>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...\\\\n#24 0x55e56814253c \\\\u003Cunknown>\\\\n#25 0x7f74f6c9ca94 \\\\u003Cunknown>\\\\n#26 0x7f74f6d29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: MicrosoftEdge=131.0.2903.86)\nE       Stacktrace:\nE       #0 0x55e56814394e <unknown>\nE       #1 0x55e567bf8b76 <unknown>\nE       #2 0x55e567be27ae <unknown>\nE       #3 0x55e567be2552 <unknown>\nE       #4 0x55e567be0a3b <unknown>\nE       #5 0x55e567be0e94 <unknown>\nE       #6 0x55e567bf5267 <unknown>\nE       #7 0x55e567c0527f <unknown>\nE       #8 0x55e567c0ab2b <unknown>\nE       #9 0x55e567be1485 <unknown>\nE       #10 0x55e567c04f10 <unknown>\nE       #11 0x55e567c87fd9 <unknown>\nE       #12 0x55e567c69f83 <unknown>\nE       #13 0x55e567c3a01e <unknown>\nE       #14 0x55e567c3acfe <unknown>\nE       #15 0x55e5681189e1 <unknown>\nE       #16 0x55e56811bbde <unknown>\nE       #17 0x55e56811b65b <unknown>\nE       #18 0x55e56811c005 <unknown>\nE       #19 0x55e56810a3f2 <unknown>\nE       #20 0x55e56811c38d <unknown>\nE       #21 0x55e5680f45b5 <unknown>\nE       #22 0x55e568134008 <unknown>\nE       #23 0x55e56813421f <unknown>\nE       #24 0x55e56814253c <unknown>\nE       #25 0x7f74f6c9ca94 <unknown>\nE       #26 0x7f74f6d29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1734004982218,"stop":1734004982281,"duration":63},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1734004982281,"stop":1734005324807,"duration":342526},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: MicrosoftEdge=131.0.2903.86)\nStacktrace:\n#0 0x55e56814394e <unknown>\n#1 0x55e567bf8b76 <unknown>\n#2 0x55e567be27ae <unknown>\n#3 0x55e567be2552 <unknown>\n#4 0x55e567be0a3b <unknown>\n#5 0x55e567be0e94 <unknown>\n#6 0x55e567bf5267 <unknown>\n#7 0x55e567c0527f <unknown>\n#8 0x55e567c0ab2b <unknown>\n#9 0x55e567be1485 <unknown>\n#10 0x55e567c04f10 <unknown>\n#11 0x55e567c87fd9 <unknown>\n#12 0x55e567c69f83 <unknown>\n#13 0x55e567c3a01e <unknown>\n#14 0x55e567c3acfe <unknown>\n#15 0x55e5681189e1 <unknown>\n#16 0x55e56811bbde <unknown>\n#17 0x55e56811b65b <unknown>\n#18 0x55e56811c005 <unknown>\n#19 0x55e56810a3f2 <unknown>\n#20 0x55e56811c38d <unknown>\n#21 0x55e5680f45b5 <unknown>\n#22 0x55e568134008 <unknown>\n#23 0x55e56813421f <unknown>\n#24 0x55e56814253c <unknown>\n#25 0x7f74f6c9ca94 <unknown>\n#26 0x7f74f6d29c3c <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 166, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 102, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 1132, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 906, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/home/runner/work/QUBA_WEB/QUBA_WEB/Common/BaseClass.py\", line 70, in driver\n    driver.execute_cdp_cmd(\"Page.setDownloadBehavior\", params)\n  File \"/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py\", line 136, in execute_cdp_cmd\n    return self.execute(\"executeCdpCommand\", {\"cmd\": cmd, \"params\": cmd_args})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"driver","time":{"start":1734005325861,"stop":1734005326581,"duration":720},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1734005326581,"stop":1734005326581,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"driver::0","time":{"start":1734005396771,"stop":1734005396871,"duration":100},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Home page"},{"name":"severity","value":"critical"},{"name":"tag","value":"flaky(reruns=3, reruns_delay=1)"},{"name":"parentSuite","value":"Tests"},{"name":"suite","value":"test_HomePage"},{"name":"subSuite","value":"TestHomePage"},{"name":"host","value":"fv-az798-596"},{"name":"thread","value":"1930-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_HomePage"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"'edge'"}],"links":[{"name":"C58319","url":"https://hedgehoglabqa.testrail.io/index.php?/cases/view/58319","type":"tms"},{"name":"Epic QP-356","url":"https://hedgehog-lab.atlassian.net/browse/QP-356","type":"issue"},{"name":"Story QP-269","url":"https://hedgehog-lab.atlassian.net/browse/QP-269","type":"issue"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["flaky(reruns=3, reruns_delay=1)"]},"source":"ae6a2f5402c616d6.json","parameterValues":["'edge'"]}