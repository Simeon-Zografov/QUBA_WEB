{"name": "Event carousel cards without events", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_TUNNEL_CONNECTION_FAILED\n  (Session info: MicrosoftEdge=130.0.2849.56)\nStacktrace:\n#0 0x5640cfa2c5be <unknown>\n#1 0x5640cf4f39f6 <unknown>\n#2 0x5640cf4f162a <unknown>\n#3 0x5640cf4dda10 <unknown>\n#4 0x5640cf4df660 <unknown>\n#5 0x5640cf4dddc4 <unknown>\n#6 0x5640cf4dd62a <unknown>\n#7 0x5640cf4dd4b2 <unknown>\n#8 0x5640cf4db99e <unknown>\n#9 0x5640cf4dbca7 <unknown>\n#10 0x5640cf4f65d3 <unknown>\n#11 0x5640cf58169e <unknown>\n#12 0x5640cf562f52 <unknown>\n#13 0x5640cf580efe <unknown>\n#14 0x5640cf562cf3 <unknown>\n#15 0x5640cf5332de <unknown>\n#16 0x5640cf533fbe <unknown>\n#17 0x5640cfa01521 <unknown>\n#18 0x5640cfa04791 <unknown>\n#19 0x5640cfa0420b <unknown>\n#20 0x5640cfa04bc5 <unknown>\n#21 0x5640cf9f2ef2 <unknown>\n#22 0x5640cfa04f4d <unknown>\n#23 0x5640cf9dc8c5 <unknown>\n#24 0x5640cfa1cd18 <unknown>\n#25 0x5640cfa1cf2f <unknown>\n#26 0x5640cfa2b1bc <unknown>\n#27 0x7f17f6a94ac3 <unknown>", "trace": "self = <Tests.test_HomePage.TestHomePage object at 0x7fb3d47b8290>\nproxy_driver = <selenium.webdriver.edge.webdriver.WebDriver (session=\"c24d2bf10ce7b5e7b3202af6b014b07f\")>\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('Home page')\n    @allure.title(\"Event carousel cards without events\")\n    @allure.issue(\"QP-269\", \"Story QP-269\")\n    @allure.issue(\"QP-356\", \"Epic QP-356\")\n    @allure.testcase(\"58610\", \"C58610\")\n    # @pytest.mark.dependency(depends=[\"test_22\"])\n    @pytest.mark.parametrize(\"proxy_driver\", [\"home_page_test_29\"], indirect=True)\n    def test_29(self, proxy_driver):\n        if TestHomePage.current_browser == \"firefox\" or TestHomePage.current_browser == \"safari\":\n            pytest.skip(f\"Mitmproxy is not supported on {TestHomePage.current_browser}\")\n        # request.param = TestHomePage.current_browser\n        # proxy_driver = proxy_driver(TestHomePage.current_browser, \"home_page_test_29\")\n        # browser = TestHomePage.current_browser\n        # proxy_driver = BaseClass.proxy_driver(browser)\n>       proxy_driver.get(BaseClass.url)\n\nTests/test_HomePage.py:587: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb3d4315150>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_TUNNEL_CONNECTION_FAILE...\\\\n#25 0x5640cfa1cf2f \\\\u003Cunknown>\\\\n#26 0x5640cfa2b1bc \\\\u003Cunknown>\\\\n#27 0x7f17f6a94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_TUNNEL_CONNECTION_FAILED\nE         (Session info: MicrosoftEdge=130.0.2849.56)\nE       Stacktrace:\nE       #0 0x5640cfa2c5be <unknown>\nE       #1 0x5640cf4f39f6 <unknown>\nE       #2 0x5640cf4f162a <unknown>\nE       #3 0x5640cf4dda10 <unknown>\nE       #4 0x5640cf4df660 <unknown>\nE       #5 0x5640cf4dddc4 <unknown>\nE       #6 0x5640cf4dd62a <unknown>\nE       #7 0x5640cf4dd4b2 <unknown>\nE       #8 0x5640cf4db99e <unknown>\nE       #9 0x5640cf4dbca7 <unknown>\nE       #10 0x5640cf4f65d3 <unknown>\nE       #11 0x5640cf58169e <unknown>\nE       #12 0x5640cf562f52 <unknown>\nE       #13 0x5640cf580efe <unknown>\nE       #14 0x5640cf562cf3 <unknown>\nE       #15 0x5640cf5332de <unknown>\nE       #16 0x5640cf533fbe <unknown>\nE       #17 0x5640cfa01521 <unknown>\nE       #18 0x5640cfa04791 <unknown>\nE       #19 0x5640cfa0420b <unknown>\nE       #20 0x5640cfa04bc5 <unknown>\nE       #21 0x5640cf9f2ef2 <unknown>\nE       #22 0x5640cfa04f4d <unknown>\nE       #23 0x5640cf9dc8c5 <unknown>\nE       #24 0x5640cfa1cd18 <unknown>\nE       #25 0x5640cfa1cf2f <unknown>\nE       #26 0x5640cfa2b1bc <unknown>\nE       #27 0x7f17f6a94ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException"}, "attachments": [{"name": "stdout", "source": "4c1a1932-93f6-4f2c-9e1d-a14c33885993-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "proxy_driver", "value": "'home_page_test_29'"}, {"name": "driver", "value": "'edge'"}], "start": 1731486679035, "stop": 1731486679207, "uuid": "561f1c2b-2037-4587-b189-b41afa302585", "historyId": "9ac7a6aeb33d74cd3a8637517586188a", "testCaseId": "9ba0cf062138dca41ea0f8f7ddeb2719", "fullName": "Tests.test_HomePage.TestHomePage#test_29", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "Home page"}, {"name": "tag", "value": "flaky(reruns=3, reruns_delay=1)"}, {"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_HomePage"}, {"name": "subSuite", "value": "TestHomePage"}, {"name": "host", "value": "fv-az1501-681"}, {"name": "thread", "value": "1761-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_HomePage"}], "links": [{"type": "tms", "url": "https://hedgehoglabqa.testrail.io/index.php?/cases/view/58610", "name": "C58610"}, {"type": "issue", "url": "https://hedgehog-lab.atlassian.net/browse/QP-356", "name": "Epic QP-356"}, {"type": "issue", "url": "https://hedgehog-lab.atlassian.net/browse/QP-269", "name": "Story QP-269"}]}