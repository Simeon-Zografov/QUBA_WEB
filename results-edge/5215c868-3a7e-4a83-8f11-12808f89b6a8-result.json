{"name": "User is navigated to the About page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: MicrosoftEdge=130.0.2849.80)\nStacktrace:\n#0 0x56154098b5be <unknown>\n#1 0x5615404529f6 <unknown>\n#2 0x56154043c6e8 <unknown>\n#3 0x56154043c4b2 <unknown>\n#4 0x56154043a99e <unknown>\n#5 0x56154043ae14 <unknown>\n#6 0x56154044f097 <unknown>\n#7 0x56154045e4ff <unknown>\n#8 0x5615404632fb <unknown>\n#9 0x56154043b405 <unknown>\n#10 0x56154045e190 <unknown>\n#11 0x5615404dfd42 <unknown>\n#12 0x5615404c1cf3 <unknown>\n#13 0x5615404922de <unknown>\n#14 0x561540492fbe <unknown>\n#15 0x561540960521 <unknown>\n#16 0x561540963791 <unknown>\n#17 0x56154096320b <unknown>\n#18 0x561540963bc5 <unknown>\n#19 0x561540951ef2 <unknown>\n#20 0x561540963f4d <unknown>\n#21 0x56154093b8c5 <unknown>\n#22 0x56154097bd18 <unknown>\n#23 0x56154097bf2f <unknown>\n#24 0x56154098a1bc <unknown>\n#25 0x7fa1c6894ac3 <unknown>", "trace": "self = <Tests.test_AboutPage.TestAboutPage object at 0x7ff8ec4a3490>\nrequest = <SubRequest 'driver' for <Function test_1[edge]>>\n\n    @pytest.fixture(scope=\"class\", autouse=True)\n    def driver(self, request):\n        browser = request.param\n    \n        project_folder = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    \n        is_ci = os.getenv('CI') == 'true'\n        if is_ci:\n            if browser == \"edge\":\n                # Set up Edge options\n                options = EdgeOptions()\n                options.add_argument(\"--headless\")\n                options.add_argument(\"--disable-gpu\")\n                options.add_argument(\"--no-sandbox\")\n                options.add_argument(\"--disable-dev-shm-usage\")\n                options.add_argument(\"--disable-extensions\")\n                options.add_argument(\"--disable-infobars\")\n                serv = EdgeService(EdgeChromiumDriverManager().install())\n                driver = webdriver.Edge(service=serv, options=options)\n            elif browser == \"chrome\":\n                options = ChromeOptions()\n                options.add_argument(\"--headless\")\n                options.add_argument(\"--disable-gpu\")\n                options.add_argument(\"--no-sandbox\")\n                options.add_argument(\"--disable-dev-shm-usage\")\n                options.add_argument(\"--disable-extensions\")\n                options.add_argument(\"--disable-infobars\")\n                chrome_driver_path = \"/usr/bin/chromedriver\"\n                serv = ChromeService(chrome_driver_path)\n                driver = webdriver.Chrome(service=serv, options=options)\n            elif browser == \"firefox\":\n                options = FirefoxOptions()\n                options.add_argument(\"--headless\")\n                options.set_preference(\"browser.cache.disk.enable\", False)\n                options.set_preference(\"network.proxy.type\", 0)\n                geckodriver_driver_path = \"/usr/bin/geckodriver\"\n                serv = FirefoxService(geckodriver_driver_path)\n                # webdriver.DesiredCapabilities.FIREFOX['proxy'] = {\"proxyType\": \"direct\"}\n                driver = webdriver.Firefox(service=serv, options=options)\n            else:\n                options = SafariOptions()\n                options.page_load_strategy = 'eager'\n                driver = webdriver.Safari(options=options)\n        else:\n            if browser == \"edge\":\n                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()))\n            elif browser == \"chrome\":\n                chrome_driver_path = os.path.join(project_folder, 'Resources', 'chromedriver')\n                serv = ChromeService(chrome_driver_path)\n                driver = webdriver.Chrome(service=serv)\n            elif browser == \"firefox\":\n                options = FirefoxOptions()\n                options.set_preference(\"browser.cache.disk.enable\", False)\n                options.set_preference(\"network.proxy.type\", 0)\n                geco_driver_path = os.path.join(project_folder, 'Resources', 'geckodriver')\n                serv = FirefoxService(geco_driver_path)\n                # webdriver.DesiredCapabilities.FIREFOX['proxy'] = {\"proxyType\": \"direct\"}\n                driver = webdriver.Firefox(service=serv, options=options)\n            else:\n                options = SafariOptions()\n                options.page_load_strategy = 'eager'\n                driver = webdriver.Safari(options=options)\n    \n        driver.implicitly_wait(10)\n>       driver.maximize_window()\n\nCommon/BaseClass.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:499: in maximize_window\n    self.execute(command, None)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff8ed77f8d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...\\\\n#23 0x56154097bf2f \\\\u003Cunknown>\\\\n#24 0x56154098a1bc \\\\u003Cunknown>\\\\n#25 0x7fa1c6894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: MicrosoftEdge=130.0.2849.80)\nE       Stacktrace:\nE       #0 0x56154098b5be <unknown>\nE       #1 0x5615404529f6 <unknown>\nE       #2 0x56154043c6e8 <unknown>\nE       #3 0x56154043c4b2 <unknown>\nE       #4 0x56154043a99e <unknown>\nE       #5 0x56154043ae14 <unknown>\nE       #6 0x56154044f097 <unknown>\nE       #7 0x56154045e4ff <unknown>\nE       #8 0x5615404632fb <unknown>\nE       #9 0x56154043b405 <unknown>\nE       #10 0x56154045e190 <unknown>\nE       #11 0x5615404dfd42 <unknown>\nE       #12 0x5615404c1cf3 <unknown>\nE       #13 0x5615404922de <unknown>\nE       #14 0x561540492fbe <unknown>\nE       #15 0x561540960521 <unknown>\nE       #16 0x561540963791 <unknown>\nE       #17 0x56154096320b <unknown>\nE       #18 0x561540963bc5 <unknown>\nE       #19 0x561540951ef2 <unknown>\nE       #20 0x561540963f4d <unknown>\nE       #21 0x56154093b8c5 <unknown>\nE       #22 0x56154097bd18 <unknown>\nE       #23 0x56154097bf2f <unknown>\nE       #24 0x56154098a1bc <unknown>\nE       #25 0x7fa1c6894ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException"}, "parameters": [{"name": "driver", "value": "'edge'"}], "start": 1732091284762, "stop": 1732091284762, "uuid": "3e04dbb5-19d0-497f-97c4-1984ca9a6a81", "historyId": "08fb85c7c9b855fd96b63046de2d5fdb", "testCaseId": "f54e46e475bb0a19f2e5ad801964050b", "fullName": "Tests.test_AboutPage.TestAboutPage#test_1", "labels": [{"name": "severity", "value": "critical"}, {"name": "feature", "value": "About page"}, {"name": "tag", "value": "flaky(reruns=3, reruns_delay=1)"}, {"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_AboutPage"}, {"name": "subSuite", "value": "TestAboutPage"}, {"name": "host", "value": "fv-az1393-935"}, {"name": "thread", "value": "1880-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_AboutPage"}], "links": [{"type": "tms", "url": "https://hedgehoglabqa.testrail.io/index.php?/cases/view/58509", "name": "C58509"}, {"type": "issue", "url": "https://hedgehog-lab.atlassian.net/browse/QP-356", "name": "Epic QP-356"}, {"type": "issue", "url": "https://hedgehog-lab.atlassian.net/browse/QP-266", "name": "Story QP-266"}]}