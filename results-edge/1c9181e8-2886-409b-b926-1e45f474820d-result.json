{"name": "Image gallery with only one image", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_CLOSED\n  (Session info: MicrosoftEdge=130.0.2849.80)\nStacktrace:\n#0 0x55799a2f85be <unknown>\n#1 0x557999dbf9f6 <unknown>\n#2 0x557999dbd62a <unknown>\n#3 0x557999da9a10 <unknown>\n#4 0x557999dab660 <unknown>\n#5 0x557999da9dc4 <unknown>\n#6 0x557999da962a <unknown>\n#7 0x557999da94b2 <unknown>\n#8 0x557999da799e <unknown>\n#9 0x557999da7ca7 <unknown>\n#10 0x557999dc25d3 <unknown>\n#11 0x557999e4d69e <unknown>\n#12 0x557999e2ef52 <unknown>\n#13 0x557999e4cefe <unknown>\n#14 0x557999e2ecf3 <unknown>\n#15 0x557999dff2de <unknown>\n#16 0x557999dfffbe <unknown>\n#17 0x55799a2cd521 <unknown>\n#18 0x55799a2d0791 <unknown>\n#19 0x55799a2d020b <unknown>\n#20 0x55799a2d0bc5 <unknown>\n#21 0x55799a2beef2 <unknown>\n#22 0x55799a2d0f4d <unknown>\n#23 0x55799a2a88c5 <unknown>\n#24 0x55799a2e8d18 <unknown>\n#25 0x55799a2e8f2f <unknown>\n#26 0x55799a2f71bc <unknown>\n#27 0x7fc3fbe94ac3 <unknown>", "trace": "self = <Tests.test_AboutPage.TestAboutPage object at 0x7f6a44d24d90>\nproxy_driver = <selenium.webdriver.edge.webdriver.WebDriver (session=\"da7551376828ae410d834554283c45aa\")>\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('About page')\n    @allure.title(\"Image gallery with only one image\")\n    @allure.issue(\"QP-266\", \"Story QP-266\")\n    @allure.issue(\"QP-356\", \"Epic QP-356\")\n    @allure.testcase(\"58522\", \"C58522\")\n    @pytest.mark.parametrize(\"proxy_driver\", [\"about_page_test_9\"], indirect=True)\n    def test_9(self, proxy_driver):\n>       proxy_driver.get(BaseClass.url + \"about\")\n\nTests/test_AboutPage.py:163: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6a4386e090>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_CLOSED\\\\n  (...\\\\n#25 0x55799a2e8f2f \\\\u003Cunknown>\\\\n#26 0x55799a2f71bc \\\\u003Cunknown>\\\\n#27 0x7fc3fbe94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_CLOSED\nE         (Session info: MicrosoftEdge=130.0.2849.80)\nE       Stacktrace:\nE       #0 0x55799a2f85be <unknown>\nE       #1 0x557999dbf9f6 <unknown>\nE       #2 0x557999dbd62a <unknown>\nE       #3 0x557999da9a10 <unknown>\nE       #4 0x557999dab660 <unknown>\nE       #5 0x557999da9dc4 <unknown>\nE       #6 0x557999da962a <unknown>\nE       #7 0x557999da94b2 <unknown>\nE       #8 0x557999da799e <unknown>\nE       #9 0x557999da7ca7 <unknown>\nE       #10 0x557999dc25d3 <unknown>\nE       #11 0x557999e4d69e <unknown>\nE       #12 0x557999e2ef52 <unknown>\nE       #13 0x557999e4cefe <unknown>\nE       #14 0x557999e2ecf3 <unknown>\nE       #15 0x557999dff2de <unknown>\nE       #16 0x557999dfffbe <unknown>\nE       #17 0x55799a2cd521 <unknown>\nE       #18 0x55799a2d0791 <unknown>\nE       #19 0x55799a2d020b <unknown>\nE       #20 0x55799a2d0bc5 <unknown>\nE       #21 0x55799a2beef2 <unknown>\nE       #22 0x55799a2d0f4d <unknown>\nE       #23 0x55799a2a88c5 <unknown>\nE       #24 0x55799a2e8d18 <unknown>\nE       #25 0x55799a2e8f2f <unknown>\nE       #26 0x55799a2f71bc <unknown>\nE       #27 0x7fc3fbe94ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException"}, "attachments": [{"name": "stdout", "source": "989d119a-b70c-4ed5-8445-502b34cb885c-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "proxy_driver", "value": "'about_page_test_9'"}, {"name": "driver", "value": "'edge'"}], "start": 1731914054113, "stop": 1731914054255, "uuid": "5a1bfe77-20ef-4731-a33f-4a78b7b66383", "historyId": "a62706d125119b2924f65a46bf1039dd", "testCaseId": "6604f3249b7fa9a7af0e103bab10b894", "fullName": "Tests.test_AboutPage.TestAboutPage#test_9", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "About page"}, {"name": "tag", "value": "flaky(reruns=3, reruns_delay=1)"}, {"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_AboutPage"}, {"name": "subSuite", "value": "TestAboutPage"}, {"name": "host", "value": "fv-az692-655"}, {"name": "thread", "value": "1774-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_AboutPage"}], "links": [{"type": "tms", "url": "https://hedgehoglabqa.testrail.io/index.php?/cases/view/58522", "name": "C58522"}, {"type": "issue", "url": "https://hedgehog-lab.atlassian.net/browse/QP-356", "name": "Epic QP-356"}, {"type": "issue", "url": "https://hedgehog-lab.atlassian.net/browse/QP-266", "name": "Story QP-266"}]}