{"name": "Event carousel cards without events", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Microsoft Edge failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from msedge location /usr/bin/microsoft-edge is no longer running, so msedgedriver is assuming that msedge has crashed.)\nStacktrace:\n#0 0x562523ef25be <unknown>\n#1 0x5625239b99f6 <unknown>\n#2 0x5625239f1fde <unknown>\n#3 0x5625239eb5d9 <unknown>\n#4 0x562523a360c2 <unknown>\n#5 0x562523a3530f <unknown>\n#6 0x562523a28cf3 <unknown>\n#7 0x5625239f92de <unknown>\n#8 0x5625239f9fbe <unknown>\n#9 0x562523ec7521 <unknown>\n#10 0x562523eca791 <unknown>\n#11 0x562523eca20b <unknown>\n#12 0x562523ecabc5 <unknown>\n#13 0x562523eb8ef2 <unknown>\n#14 0x562523ecaf4d <unknown>\n#15 0x562523ea28c5 <unknown>\n#16 0x562523ee2d18 <unknown>\n#17 0x562523ee2f2f <unknown>\n#18 0x562523ef11bc <unknown>\n#19 0x7fa8d0894ac3 <unknown>", "trace": "self = <Tests.test_HomePage.TestHomePage object at 0x7f4e171e0450>\nrequest = <SubRequest 'proxy_driver' for <Function test_29[home_page_test_29-edge]>>\n\n    @pytest.fixture(scope=\"function\", autouse=False)\n    def proxy_driver(self, request):\n        browser = request.node.callspec.params[\"driver\"]\n        test_name = request.param\n        print(browser)\n        print(test_name)\n        # browser = getattr(request, \"param\", None)\n        project_folder = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n        mitmdump_path = shutil.which(\"mitmdump\")\n        script_path = os.path.join(project_folder, \"Common\", \"ResponseInterception.py\")\n        print(\"Proxy fixture started\")\n    \n        if mitmdump_path is None:\n            raise FileNotFoundError(\"mitmdump executable not found in PATH. Please ensure mitmproxy is installed.\")\n        if browser == \"chrome\":\n            port = \"8082\"\n        elif browser == \"edge\":\n            port = \"8084\"\n        else:\n            port = \"8081\"\n        # port = \"8082\"\n        mitmdump_process = subprocess.Popen([mitmdump_path, \"-s\", script_path, \"--listen-port\", port,\n                                             \"--set\", f\"test_name={test_name}\"])\n        print(\"Proxy subprocess started\")\n        if browser == \"chrome\":\n            chrome_driver_path = os.path.join(project_folder, 'Resources', 'chromedriver')\n            options = webdriver.ChromeOptions()\n            options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')  # mitmproxy default proxy\n            options.add_argument('--ignore-certificate-errors')  # Bypass cert errors if needed for testing\n    \n            serv = ChromeService(chrome_driver_path)\n            proxy_driver = webdriver.Chrome(service=serv, options=options)\n        else:\n            options = webdriver.EdgeOptions()\n            options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')  # mitmproxy default proxy\n            options.add_argument('--ignore-certificate-errors')  # Bypass cert errors if needed for testing\n    \n>           proxy_driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)\n\nCommon/BaseClass.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/edge/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py:61: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:208: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4e17bb8510>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: Microsoft Edge faile...\\\\n#17 0x562523ee2f2f \\\\u003Cunknown>\\\\n#18 0x562523ef11bc \\\\u003Cunknown>\\\\n#19 0x7fa8d0894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Microsoft Edge failed to start: exited normally.\nE         (session not created: DevToolsActivePort file doesn't exist)\nE         (The process started from msedge location /usr/bin/microsoft-edge is no longer running, so msedgedriver is assuming that msedge has crashed.)\nE       Stacktrace:\nE       #0 0x562523ef25be <unknown>\nE       #1 0x5625239b99f6 <unknown>\nE       #2 0x5625239f1fde <unknown>\nE       #3 0x5625239eb5d9 <unknown>\nE       #4 0x562523a360c2 <unknown>\nE       #5 0x562523a3530f <unknown>\nE       #6 0x562523a28cf3 <unknown>\nE       #7 0x5625239f92de <unknown>\nE       #8 0x5625239f9fbe <unknown>\nE       #9 0x562523ec7521 <unknown>\nE       #10 0x562523eca791 <unknown>\nE       #11 0x562523eca20b <unknown>\nE       #12 0x562523ecabc5 <unknown>\nE       #13 0x562523eb8ef2 <unknown>\nE       #14 0x562523ecaf4d <unknown>\nE       #15 0x562523ea28c5 <unknown>\nE       #16 0x562523ee2d18 <unknown>\nE       #17 0x562523ee2f2f <unknown>\nE       #18 0x562523ef11bc <unknown>\nE       #19 0x7fa8d0894ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException"}, "attachments": [{"name": "stdout", "source": "1a37ec75-085f-4897-a523-7347590d2637-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "proxy_driver", "value": "'home_page_test_29'"}, {"name": "driver", "value": "'edge'"}], "start": 1731480651118, "stop": 1731480651118, "uuid": "6f77a75a-85e4-4e2d-8711-8ab5fcafba66", "historyId": "9ac7a6aeb33d74cd3a8637517586188a", "testCaseId": "9ba0cf062138dca41ea0f8f7ddeb2719", "fullName": "Tests.test_HomePage.TestHomePage#test_29", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "Home page"}, {"name": "tag", "value": "flaky(reruns=3, reruns_delay=1)"}, {"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_HomePage"}, {"name": "subSuite", "value": "TestHomePage"}, {"name": "host", "value": "fv-az714-931"}, {"name": "thread", "value": "1749-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_HomePage"}], "links": [{"type": "tms", "url": "https://hedgehoglabqa.testrail.io/index.php?/cases/view/58610", "name": "C58610"}, {"type": "issue", "url": "https://hedgehog-lab.atlassian.net/browse/QP-356", "name": "Epic QP-356"}, {"type": "issue", "url": "https://hedgehog-lab.atlassian.net/browse/QP-269", "name": "Story QP-269"}]}