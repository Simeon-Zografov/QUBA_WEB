{"uid":"a7896e246e12b4b","name":"Event carousel cards without events","fullName":"Tests.test_HomePage.TestHomePage#test_29","historyId":"1a6690ef32784c10be94e03a5c9e455c","time":{"start":1731482634179,"stop":1731482634281,"duration":102},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_PROXY_CONNECTION_FAILED\n  (Session info: chrome=130.0.6723.91)\nStacktrace:\n#0 0x55df0b2e313a <unknown>\n#1 0x55df0adfe460 <unknown>\n#2 0x55df0adf6661 <unknown>\n#3 0x55df0ade6dc9 <unknown>\n#4 0x55df0ade8afa <unknown>\n#5 0x55df0ade707d <unknown>\n#6 0x55df0ade68fc <unknown>\n#7 0x55df0ade67ed <unknown>\n#8 0x55df0ade487c <unknown>\n#9 0x55df0ade4eba <unknown>\n#10 0x55df0ae00d59 <unknown>\n#11 0x55df0ae8e645 <unknown>\n#12 0x55df0ae6f012 <unknown>\n#13 0x55df0ae8daf6 <unknown>\n#14 0x55df0ae6edb3 <unknown>\n#15 0x55df0ae3dc10 <unknown>\n#16 0x55df0ae3ebee <unknown>\n#17 0x55df0b2af3cb <unknown>\n#18 0x55df0b2b3368 <unknown>\n#19 0x55df0b29ceec <unknown>\n#20 0x55df0b2b3ee7 <unknown>\n#21 0x55df0b28213f <unknown>\n#22 0x55df0b2d1858 <unknown>\n#23 0x55df0b2d1a20 <unknown>\n#24 0x55df0b2e1fb6 <unknown>\n#25 0x7fcf58694ac3 <unknown>","statusTrace":"self = <Tests.test_HomePage.TestHomePage object at 0x7f445f614050>\nproxy_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ec3c8f17b37256d3e57bf8d7a1cf89e1\")>\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('Home page')\n    @allure.title(\"Event carousel cards without events\")\n    @allure.issue(\"QP-269\", \"Story QP-269\")\n    @allure.issue(\"QP-356\", \"Epic QP-356\")\n    @allure.testcase(\"58610\", \"C58610\")\n    # @pytest.mark.dependency(depends=[\"test_22\"])\n    @pytest.mark.parametrize(\"proxy_driver\", [\"home_page_test_29\"], indirect=True)\n    def test_29(self, proxy_driver):\n        if TestHomePage.current_browser == \"firefox\" or TestHomePage.current_browser == \"safari\":\n            pytest.skip(f\"Mitmproxy is not supported on {TestHomePage.current_browser}\")\n        # request.param = TestHomePage.current_browser\n        # proxy_driver = proxy_driver(TestHomePage.current_browser, \"home_page_test_29\")\n        # browser = TestHomePage.current_browser\n        # proxy_driver = BaseClass.proxy_driver(browser)\n>       proxy_driver.get(BaseClass.url)\n\nTests/test_HomePage.py:587: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f445e2b4c10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_PROXY_CONNECTION_FAILED...\\\\n#23 0x55df0b2d1a20 \\\\u003Cunknown>\\\\n#24 0x55df0b2e1fb6 \\\\u003Cunknown>\\\\n#25 0x7fcf58694ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_PROXY_CONNECTION_FAILED\nE         (Session info: chrome=130.0.6723.91)\nE       Stacktrace:\nE       #0 0x55df0b2e313a <unknown>\nE       #1 0x55df0adfe460 <unknown>\nE       #2 0x55df0adf6661 <unknown>\nE       #3 0x55df0ade6dc9 <unknown>\nE       #4 0x55df0ade8afa <unknown>\nE       #5 0x55df0ade707d <unknown>\nE       #6 0x55df0ade68fc <unknown>\nE       #7 0x55df0ade67ed <unknown>\nE       #8 0x55df0ade487c <unknown>\nE       #9 0x55df0ade4eba <unknown>\nE       #10 0x55df0ae00d59 <unknown>\nE       #11 0x55df0ae8e645 <unknown>\nE       #12 0x55df0ae6f012 <unknown>\nE       #13 0x55df0ae8daf6 <unknown>\nE       #14 0x55df0ae6edb3 <unknown>\nE       #15 0x55df0ae3dc10 <unknown>\nE       #16 0x55df0ae3ebee <unknown>\nE       #17 0x55df0b2af3cb <unknown>\nE       #18 0x55df0b2b3368 <unknown>\nE       #19 0x55df0b29ceec <unknown>\nE       #20 0x55df0b2b3ee7 <unknown>\nE       #21 0x55df0b28213f <unknown>\nE       #22 0x55df0b2d1858 <unknown>\nE       #23 0x55df0b2d1a20 <unknown>\nE       #24 0x55df0b2e1fb6 <unknown>\nE       #25 0x7fcf58694ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1731482585973,"stop":1731482586038,"duration":65},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_xunit_setup_class_fixture_TestHomePage","time":{"start":1731482586038,"stop":1731482589813,"duration":3775},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1731482589813,"stop":1731482603381,"duration":13568},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"proxy_driver","time":{"start":1731482633905,"stop":1731482634178,"duration":273},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1731482633905,"stop":1731482633905,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_PROXY_CONNECTION_FAILED\n  (Session info: chrome=130.0.6723.91)\nStacktrace:\n#0 0x55df0b2e313a <unknown>\n#1 0x55df0adfe460 <unknown>\n#2 0x55df0adf6661 <unknown>\n#3 0x55df0ade6dc9 <unknown>\n#4 0x55df0ade8afa <unknown>\n#5 0x55df0ade707d <unknown>\n#6 0x55df0ade68fc <unknown>\n#7 0x55df0ade67ed <unknown>\n#8 0x55df0ade487c <unknown>\n#9 0x55df0ade4eba <unknown>\n#10 0x55df0ae00d59 <unknown>\n#11 0x55df0ae8e645 <unknown>\n#12 0x55df0ae6f012 <unknown>\n#13 0x55df0ae8daf6 <unknown>\n#14 0x55df0ae6edb3 <unknown>\n#15 0x55df0ae3dc10 <unknown>\n#16 0x55df0ae3ebee <unknown>\n#17 0x55df0b2af3cb <unknown>\n#18 0x55df0b2b3368 <unknown>\n#19 0x55df0b29ceec <unknown>\n#20 0x55df0b2b3ee7 <unknown>\n#21 0x55df0b28213f <unknown>\n#22 0x55df0b2d1858 <unknown>\n#23 0x55df0b2d1a20 <unknown>\n#24 0x55df0b2e1fb6 <unknown>\n#25 0x7fcf58694ac3 <unknown>","statusTrace":"self = <Tests.test_HomePage.TestHomePage object at 0x7f445f614050>\nproxy_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ec3c8f17b37256d3e57bf8d7a1cf89e1\")>\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('Home page')\n    @allure.title(\"Event carousel cards without events\")\n    @allure.issue(\"QP-269\", \"Story QP-269\")\n    @allure.issue(\"QP-356\", \"Epic QP-356\")\n    @allure.testcase(\"58610\", \"C58610\")\n    # @pytest.mark.dependency(depends=[\"test_22\"])\n    @pytest.mark.parametrize(\"proxy_driver\", [\"home_page_test_29\"], indirect=True)\n    def test_29(self, proxy_driver):\n        if TestHomePage.current_browser == \"firefox\" or TestHomePage.current_browser == \"safari\":\n            pytest.skip(f\"Mitmproxy is not supported on {TestHomePage.current_browser}\")\n        # request.param = TestHomePage.current_browser\n        # proxy_driver = proxy_driver(TestHomePage.current_browser, \"home_page_test_29\")\n        # browser = TestHomePage.current_browser\n        # proxy_driver = BaseClass.proxy_driver(browser)\n>       proxy_driver.get(BaseClass.url)\n\nTests/test_HomePage.py:587: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f445e2b4c10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_PROXY_CONNECTION_FAILED...\\\\n#23 0x55df0b2d1a20 \\\\u003Cunknown>\\\\n#24 0x55df0b2e1fb6 \\\\u003Cunknown>\\\\n#25 0x7fcf58694ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_PROXY_CONNECTION_FAILED\nE         (Session info: chrome=130.0.6723.91)\nE       Stacktrace:\nE       #0 0x55df0b2e313a <unknown>\nE       #1 0x55df0adfe460 <unknown>\nE       #2 0x55df0adf6661 <unknown>\nE       #3 0x55df0ade6dc9 <unknown>\nE       #4 0x55df0ade8afa <unknown>\nE       #5 0x55df0ade707d <unknown>\nE       #6 0x55df0ade68fc <unknown>\nE       #7 0x55df0ade67ed <unknown>\nE       #8 0x55df0ade487c <unknown>\nE       #9 0x55df0ade4eba <unknown>\nE       #10 0x55df0ae00d59 <unknown>\nE       #11 0x55df0ae8e645 <unknown>\nE       #12 0x55df0ae6f012 <unknown>\nE       #13 0x55df0ae8daf6 <unknown>\nE       #14 0x55df0ae6edb3 <unknown>\nE       #15 0x55df0ae3dc10 <unknown>\nE       #16 0x55df0ae3ebee <unknown>\nE       #17 0x55df0b2af3cb <unknown>\nE       #18 0x55df0b2b3368 <unknown>\nE       #19 0x55df0b29ceec <unknown>\nE       #20 0x55df0b2b3ee7 <unknown>\nE       #21 0x55df0b28213f <unknown>\nE       #22 0x55df0b2d1858 <unknown>\nE       #23 0x55df0b2d1a20 <unknown>\nE       #24 0x55df0b2e1fb6 <unknown>\nE       #25 0x7fcf58694ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","steps":[],"attachments":[{"uid":"88d3bcea0d6d8648","name":"stdout","source":"88d3bcea0d6d8648.txt","type":"text/plain","size":372}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"proxy_driver::0","time":{"start":1731482634327,"stop":1731482634392,"duration":65},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver::0","time":{"start":1731482637084,"stop":1731482637170,"duration":86},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_xunit_setup_class_fixture_TestHomePage::0","time":{"start":1731482637170,"stop":1731482637170,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"Home page"},{"name":"tag","value":"flaky(reruns=3, reruns_delay=1)"},{"name":"parentSuite","value":"Tests"},{"name":"suite","value":"test_HomePage"},{"name":"subSuite","value":"TestHomePage"},{"name":"host","value":"fv-az651-268"},{"name":"thread","value":"1753-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_HomePage"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"'chrome'"},{"name":"proxy_driver","value":"'home_page_test_29'"}],"links":[{"name":"C58610","url":"https://hedgehoglabqa.testrail.io/index.php?/cases/view/58610","type":"tms"},{"name":"Epic QP-356","url":"https://hedgehog-lab.atlassian.net/browse/QP-356","type":"issue"},{"name":"Story QP-269","url":"https://hedgehog-lab.atlassian.net/browse/QP-269","type":"issue"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9f1e81fea917802d","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_PROXY_CONNECTION_FAILED\n  (Session info: chrome=130.0.6723.91)\nStacktrace:\n#0 0x55fee2d3e13a <unknown>\n#1 0x55fee2859460 <unknown>\n#2 0x55fee2851661 <unknown>\n#3 0x55fee2841dc9 <unknown>\n#4 0x55fee2843afa <unknown>\n#5 0x55fee284207d <unknown>\n#6 0x55fee28418fc <unknown>\n#7 0x55fee28417ed <unknown>\n#8 0x55fee283f87c <unknown>\n#9 0x55fee283feba <unknown>\n#10 0x55fee285bd59 <unknown>\n#11 0x55fee28e9645 <unknown>\n#12 0x55fee28ca012 <unknown>\n#13 0x55fee28e8af6 <unknown>\n#14 0x55fee28c9db3 <unknown>\n#15 0x55fee2898c10 <unknown>\n#16 0x55fee2899bee <unknown>\n#17 0x55fee2d0a3cb <unknown>\n#18 0x55fee2d0e368 <unknown>\n#19 0x55fee2cf7eec <unknown>\n#20 0x55fee2d0eee7 <unknown>\n#21 0x55fee2cdd13f <unknown>\n#22 0x55fee2d2c858 <unknown>\n#23 0x55fee2d2ca20 <unknown>\n#24 0x55fee2d3cfb6 <unknown>\n#25 0x7f94f2e94ac3 <unknown>","time":{"start":1731482632687,"stop":1731482632790,"duration":103}},{"uid":"44214cd1e5eac0ce","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_PROXY_CONNECTION_FAILED\n  (Session info: chrome=130.0.6723.91)\nStacktrace:\n#0 0x55b4fc57913a <unknown>\n#1 0x55b4fc094460 <unknown>\n#2 0x55b4fc08c661 <unknown>\n#3 0x55b4fc07cdc9 <unknown>\n#4 0x55b4fc07eafa <unknown>\n#5 0x55b4fc07d07d <unknown>\n#6 0x55b4fc07c8fc <unknown>\n#7 0x55b4fc07c7ed <unknown>\n#8 0x55b4fc07a87c <unknown>\n#9 0x55b4fc07aeba <unknown>\n#10 0x55b4fc096d59 <unknown>\n#11 0x55b4fc124645 <unknown>\n#12 0x55b4fc105012 <unknown>\n#13 0x55b4fc123af6 <unknown>\n#14 0x55b4fc104db3 <unknown>\n#15 0x55b4fc0d3c10 <unknown>\n#16 0x55b4fc0d4bee <unknown>\n#17 0x55b4fc5453cb <unknown>\n#18 0x55b4fc549368 <unknown>\n#19 0x55b4fc532eec <unknown>\n#20 0x55b4fc549ee7 <unknown>\n#21 0x55b4fc51813f <unknown>\n#22 0x55b4fc567858 <unknown>\n#23 0x55b4fc567a20 <unknown>\n#24 0x55b4fc577fb6 <unknown>\n#25 0x7f6a02294ac3 <unknown>","time":{"start":1731482631205,"stop":1731482631306,"duration":101}},{"uid":"b7f865960a3f40d3","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_PROXY_CONNECTION_FAILED\n  (Session info: chrome=130.0.6723.91)\nStacktrace:\n#0 0x56266e64c13a <unknown>\n#1 0x56266e167460 <unknown>\n#2 0x56266e15f661 <unknown>\n#3 0x56266e14fdc9 <unknown>\n#4 0x56266e151afa <unknown>\n#5 0x56266e15007d <unknown>\n#6 0x56266e14f8fc <unknown>\n#7 0x56266e14f7ed <unknown>\n#8 0x56266e14d87c <unknown>\n#9 0x56266e14deba <unknown>\n#10 0x56266e169d59 <unknown>\n#11 0x56266e1f7645 <unknown>\n#12 0x56266e1d8012 <unknown>\n#13 0x56266e1f6af6 <unknown>\n#14 0x56266e1d7db3 <unknown>\n#15 0x56266e1a6c10 <unknown>\n#16 0x56266e1a7bee <unknown>\n#17 0x56266e6183cb <unknown>\n#18 0x56266e61c368 <unknown>\n#19 0x56266e605eec <unknown>\n#20 0x56266e61cee7 <unknown>\n#21 0x56266e5eb13f <unknown>\n#22 0x56266e63a858 <unknown>\n#23 0x56266e63aa20 <unknown>\n#24 0x56266e64afb6 <unknown>\n#25 0x7fdb90494ac3 <unknown>","time":{"start":1731482629685,"stop":1731482629826,"duration":141}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"72eae500ecf63f97","status":"broken","statusDetails":"OSError: [Errno 8] Exec format error: '/home/runner/work/QUBA_WEB/QUBA_WEB/Resources/chromedriver'","time":{"start":1731480635612,"stop":1731480635612,"duration":0}}]},"tags":["flaky(reruns=3, reruns_delay=1)"]},"source":"a7896e246e12b4b.json","parameterValues":["'chrome'","'home_page_test_29'"]}