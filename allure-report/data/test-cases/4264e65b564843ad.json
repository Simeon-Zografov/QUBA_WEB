{"uid":"4264e65b564843ad","name":"Event carousel cards without events","fullName":"Tests.test_HomePage.TestHomePage#test_29","historyId":"9ac7a6aeb33d74cd3a8637517586188a","time":{"start":1731486665593,"stop":1731486665736,"duration":143},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_TUNNEL_CONNECTION_FAILED\n  (Session info: MicrosoftEdge=130.0.2849.56)\nStacktrace:\n#0 0x555ff21425be <unknown>\n#1 0x555ff1c099f6 <unknown>\n#2 0x555ff1c0762a <unknown>\n#3 0x555ff1bf3a10 <unknown>\n#4 0x555ff1bf5660 <unknown>\n#5 0x555ff1bf3dc4 <unknown>\n#6 0x555ff1bf362a <unknown>\n#7 0x555ff1bf34b2 <unknown>\n#8 0x555ff1bf199e <unknown>\n#9 0x555ff1bf1ca7 <unknown>\n#10 0x555ff1c0c5d3 <unknown>\n#11 0x555ff1c9769e <unknown>\n#12 0x555ff1c78f52 <unknown>\n#13 0x555ff1c96efe <unknown>\n#14 0x555ff1c78cf3 <unknown>\n#15 0x555ff1c492de <unknown>\n#16 0x555ff1c49fbe <unknown>\n#17 0x555ff2117521 <unknown>\n#18 0x555ff211a791 <unknown>\n#19 0x555ff211a20b <unknown>\n#20 0x555ff211abc5 <unknown>\n#21 0x555ff2108ef2 <unknown>\n#22 0x555ff211af4d <unknown>\n#23 0x555ff20f28c5 <unknown>\n#24 0x555ff2132d18 <unknown>\n#25 0x555ff2132f2f <unknown>\n#26 0x555ff21411bc <unknown>\n#27 0x7f6f89a94ac3 <unknown>","statusTrace":"self = <Tests.test_HomePage.TestHomePage object at 0x7fb3d47b8290>\nproxy_driver = <selenium.webdriver.edge.webdriver.WebDriver (session=\"ca1ec93c54d4df445bbfc956858a90d1\")>\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('Home page')\n    @allure.title(\"Event carousel cards without events\")\n    @allure.issue(\"QP-269\", \"Story QP-269\")\n    @allure.issue(\"QP-356\", \"Epic QP-356\")\n    @allure.testcase(\"58610\", \"C58610\")\n    # @pytest.mark.dependency(depends=[\"test_22\"])\n    @pytest.mark.parametrize(\"proxy_driver\", [\"home_page_test_29\"], indirect=True)\n    def test_29(self, proxy_driver):\n        if TestHomePage.current_browser == \"firefox\" or TestHomePage.current_browser == \"safari\":\n            pytest.skip(f\"Mitmproxy is not supported on {TestHomePage.current_browser}\")\n        # request.param = TestHomePage.current_browser\n        # proxy_driver = proxy_driver(TestHomePage.current_browser, \"home_page_test_29\")\n        # browser = TestHomePage.current_browser\n        # proxy_driver = BaseClass.proxy_driver(browser)\n>       proxy_driver.get(BaseClass.url)\n\nTests/test_HomePage.py:587: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb3d5144a90>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_TUNNEL_CONNECTION_FAILE...\\\\n#25 0x555ff2132f2f \\\\u003Cunknown>\\\\n#26 0x555ff21411bc \\\\u003Cunknown>\\\\n#27 0x7f6f89a94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_TUNNEL_CONNECTION_FAILED\nE         (Session info: MicrosoftEdge=130.0.2849.56)\nE       Stacktrace:\nE       #0 0x555ff21425be <unknown>\nE       #1 0x555ff1c099f6 <unknown>\nE       #2 0x555ff1c0762a <unknown>\nE       #3 0x555ff1bf3a10 <unknown>\nE       #4 0x555ff1bf5660 <unknown>\nE       #5 0x555ff1bf3dc4 <unknown>\nE       #6 0x555ff1bf362a <unknown>\nE       #7 0x555ff1bf34b2 <unknown>\nE       #8 0x555ff1bf199e <unknown>\nE       #9 0x555ff1bf1ca7 <unknown>\nE       #10 0x555ff1c0c5d3 <unknown>\nE       #11 0x555ff1c9769e <unknown>\nE       #12 0x555ff1c78f52 <unknown>\nE       #13 0x555ff1c96efe <unknown>\nE       #14 0x555ff1c78cf3 <unknown>\nE       #15 0x555ff1c492de <unknown>\nE       #16 0x555ff1c49fbe <unknown>\nE       #17 0x555ff2117521 <unknown>\nE       #18 0x555ff211a791 <unknown>\nE       #19 0x555ff211a20b <unknown>\nE       #20 0x555ff211abc5 <unknown>\nE       #21 0x555ff2108ef2 <unknown>\nE       #22 0x555ff211af4d <unknown>\nE       #23 0x555ff20f28c5 <unknown>\nE       #24 0x555ff2132d18 <unknown>\nE       #25 0x555ff2132f2f <unknown>\nE       #26 0x555ff21411bc <unknown>\nE       #27 0x7f6f89a94ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1731486602515,"stop":1731486602594,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_xunit_setup_class_fixture_TestHomePage","time":{"start":1731486602595,"stop":1731486606348,"duration":3753},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1731486606348,"stop":1731486617460,"duration":11112},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1731486660039,"stop":1731486660039,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"proxy_driver","time":{"start":1731486660039,"stop":1731486665592,"duration":5553},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_TUNNEL_CONNECTION_FAILED\n  (Session info: MicrosoftEdge=130.0.2849.56)\nStacktrace:\n#0 0x555ff21425be <unknown>\n#1 0x555ff1c099f6 <unknown>\n#2 0x555ff1c0762a <unknown>\n#3 0x555ff1bf3a10 <unknown>\n#4 0x555ff1bf5660 <unknown>\n#5 0x555ff1bf3dc4 <unknown>\n#6 0x555ff1bf362a <unknown>\n#7 0x555ff1bf34b2 <unknown>\n#8 0x555ff1bf199e <unknown>\n#9 0x555ff1bf1ca7 <unknown>\n#10 0x555ff1c0c5d3 <unknown>\n#11 0x555ff1c9769e <unknown>\n#12 0x555ff1c78f52 <unknown>\n#13 0x555ff1c96efe <unknown>\n#14 0x555ff1c78cf3 <unknown>\n#15 0x555ff1c492de <unknown>\n#16 0x555ff1c49fbe <unknown>\n#17 0x555ff2117521 <unknown>\n#18 0x555ff211a791 <unknown>\n#19 0x555ff211a20b <unknown>\n#20 0x555ff211abc5 <unknown>\n#21 0x555ff2108ef2 <unknown>\n#22 0x555ff211af4d <unknown>\n#23 0x555ff20f28c5 <unknown>\n#24 0x555ff2132d18 <unknown>\n#25 0x555ff2132f2f <unknown>\n#26 0x555ff21411bc <unknown>\n#27 0x7f6f89a94ac3 <unknown>","statusTrace":"self = <Tests.test_HomePage.TestHomePage object at 0x7fb3d47b8290>\nproxy_driver = <selenium.webdriver.edge.webdriver.WebDriver (session=\"ca1ec93c54d4df445bbfc956858a90d1\")>\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('Home page')\n    @allure.title(\"Event carousel cards without events\")\n    @allure.issue(\"QP-269\", \"Story QP-269\")\n    @allure.issue(\"QP-356\", \"Epic QP-356\")\n    @allure.testcase(\"58610\", \"C58610\")\n    # @pytest.mark.dependency(depends=[\"test_22\"])\n    @pytest.mark.parametrize(\"proxy_driver\", [\"home_page_test_29\"], indirect=True)\n    def test_29(self, proxy_driver):\n        if TestHomePage.current_browser == \"firefox\" or TestHomePage.current_browser == \"safari\":\n            pytest.skip(f\"Mitmproxy is not supported on {TestHomePage.current_browser}\")\n        # request.param = TestHomePage.current_browser\n        # proxy_driver = proxy_driver(TestHomePage.current_browser, \"home_page_test_29\")\n        # browser = TestHomePage.current_browser\n        # proxy_driver = BaseClass.proxy_driver(browser)\n>       proxy_driver.get(BaseClass.url)\n\nTests/test_HomePage.py:587: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb3d5144a90>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_TUNNEL_CONNECTION_FAILE...\\\\n#25 0x555ff2132f2f \\\\u003Cunknown>\\\\n#26 0x555ff21411bc \\\\u003Cunknown>\\\\n#27 0x7f6f89a94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_TUNNEL_CONNECTION_FAILED\nE         (Session info: MicrosoftEdge=130.0.2849.56)\nE       Stacktrace:\nE       #0 0x555ff21425be <unknown>\nE       #1 0x555ff1c099f6 <unknown>\nE       #2 0x555ff1c0762a <unknown>\nE       #3 0x555ff1bf3a10 <unknown>\nE       #4 0x555ff1bf5660 <unknown>\nE       #5 0x555ff1bf3dc4 <unknown>\nE       #6 0x555ff1bf362a <unknown>\nE       #7 0x555ff1bf34b2 <unknown>\nE       #8 0x555ff1bf199e <unknown>\nE       #9 0x555ff1bf1ca7 <unknown>\nE       #10 0x555ff1c0c5d3 <unknown>\nE       #11 0x555ff1c9769e <unknown>\nE       #12 0x555ff1c78f52 <unknown>\nE       #13 0x555ff1c96efe <unknown>\nE       #14 0x555ff1c78cf3 <unknown>\nE       #15 0x555ff1c492de <unknown>\nE       #16 0x555ff1c49fbe <unknown>\nE       #17 0x555ff2117521 <unknown>\nE       #18 0x555ff211a791 <unknown>\nE       #19 0x555ff211a20b <unknown>\nE       #20 0x555ff211abc5 <unknown>\nE       #21 0x555ff2108ef2 <unknown>\nE       #22 0x555ff211af4d <unknown>\nE       #23 0x555ff20f28c5 <unknown>\nE       #24 0x555ff2132d18 <unknown>\nE       #25 0x555ff2132f2f <unknown>\nE       #26 0x555ff21411bc <unknown>\nE       #27 0x7f6f89a94ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","steps":[],"attachments":[{"uid":"213d2fd9c52c7fdc","name":"stdout","source":"213d2fd9c52c7fdc.txt","type":"text/plain","size":324}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"proxy_driver::0","time":{"start":1731486665769,"stop":1731486665834,"duration":65},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver::0","time":{"start":1731486682612,"stop":1731486682715,"duration":103},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_xunit_setup_class_fixture_TestHomePage::0","time":{"start":1731486682715,"stop":1731486682715,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"Home page"},{"name":"tag","value":"flaky(reruns=3, reruns_delay=1)"},{"name":"parentSuite","value":"Tests"},{"name":"suite","value":"test_HomePage"},{"name":"subSuite","value":"TestHomePage"},{"name":"host","value":"fv-az1501-681"},{"name":"thread","value":"1761-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_HomePage"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"'edge'"},{"name":"proxy_driver","value":"'home_page_test_29'"}],"links":[{"name":"C58610","url":"https://hedgehoglabqa.testrail.io/index.php?/cases/view/58610","type":"tms"},{"name":"Epic QP-356","url":"https://hedgehog-lab.atlassian.net/browse/QP-356","type":"issue"},{"name":"Story QP-269","url":"https://hedgehog-lab.atlassian.net/browse/QP-269","type":"issue"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["flaky(reruns=3, reruns_delay=1)"]},"source":"4264e65b564843ad.json","parameterValues":["'edge'","'home_page_test_29'"]}