{"uid":"6415f49dcd6cf7f4","name":"Image gallery with only one image","fullName":"Tests.test_AboutPage.TestAboutPage#test_9","historyId":"a62706d125119b2924f65a46bf1039dd","time":{"start":1731924536676,"stop":1731924536867,"duration":191},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_RESET\n  (Session info: MicrosoftEdge=130.0.2849.80)\nStacktrace:\n#0 0x5555c314f5be <unknown>\n#1 0x5555c2c169f6 <unknown>\n#2 0x5555c2c1462a <unknown>\n#3 0x5555c2c00a10 <unknown>\n#4 0x5555c2c02660 <unknown>\n#5 0x5555c2c00dc4 <unknown>\n#6 0x5555c2c0062a <unknown>\n#7 0x5555c2c004b2 <unknown>\n#8 0x5555c2bfe99e <unknown>\n#9 0x5555c2bfeca7 <unknown>\n#10 0x5555c2c195d3 <unknown>\n#11 0x5555c2ca469e <unknown>\n#12 0x5555c2c85f52 <unknown>\n#13 0x5555c2ca3efe <unknown>\n#14 0x5555c2c85cf3 <unknown>\n#15 0x5555c2c562de <unknown>\n#16 0x5555c2c56fbe <unknown>\n#17 0x5555c3124521 <unknown>\n#18 0x5555c3127791 <unknown>\n#19 0x5555c312720b <unknown>\n#20 0x5555c3127bc5 <unknown>\n#21 0x5555c3115ef2 <unknown>\n#22 0x5555c3127f4d <unknown>\n#23 0x5555c30ff8c5 <unknown>\n#24 0x5555c313fd18 <unknown>\n#25 0x5555c313ff2f <unknown>\n#26 0x5555c314e1bc <unknown>\n#27 0x7fcc47c94ac3 <unknown>","statusTrace":"self = <Tests.test_AboutPage.TestAboutPage object at 0x7f0f9c9a8210>\nproxy_driver = <selenium.webdriver.edge.webdriver.WebDriver (session=\"a0658d563894786db6a9386cd8914f7e\")>\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('About page')\n    @allure.title(\"Image gallery with only one image\")\n    @allure.issue(\"QP-266\", \"Story QP-266\")\n    @allure.issue(\"QP-356\", \"Epic QP-356\")\n    @allure.testcase(\"58522\", \"C58522\")\n    @pytest.mark.parametrize(\"proxy_driver\", [\"about_page_test_9\"], indirect=True)\n    def test_9(self, proxy_driver):\n>       proxy_driver.get(BaseClass.url + \"about\")\n\nTests/test_AboutPage.py:163: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f0f9b535910>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_RESET\\\\n  (S...\\\\n#25 0x5555c313ff2f \\\\u003Cunknown>\\\\n#26 0x5555c314e1bc \\\\u003Cunknown>\\\\n#27 0x7fcc47c94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_RESET\nE         (Session info: MicrosoftEdge=130.0.2849.80)\nE       Stacktrace:\nE       #0 0x5555c314f5be <unknown>\nE       #1 0x5555c2c169f6 <unknown>\nE       #2 0x5555c2c1462a <unknown>\nE       #3 0x5555c2c00a10 <unknown>\nE       #4 0x5555c2c02660 <unknown>\nE       #5 0x5555c2c00dc4 <unknown>\nE       #6 0x5555c2c0062a <unknown>\nE       #7 0x5555c2c004b2 <unknown>\nE       #8 0x5555c2bfe99e <unknown>\nE       #9 0x5555c2bfeca7 <unknown>\nE       #10 0x5555c2c195d3 <unknown>\nE       #11 0x5555c2ca469e <unknown>\nE       #12 0x5555c2c85f52 <unknown>\nE       #13 0x5555c2ca3efe <unknown>\nE       #14 0x5555c2c85cf3 <unknown>\nE       #15 0x5555c2c562de <unknown>\nE       #16 0x5555c2c56fbe <unknown>\nE       #17 0x5555c3124521 <unknown>\nE       #18 0x5555c3127791 <unknown>\nE       #19 0x5555c312720b <unknown>\nE       #20 0x5555c3127bc5 <unknown>\nE       #21 0x5555c3115ef2 <unknown>\nE       #22 0x5555c3127f4d <unknown>\nE       #23 0x5555c30ff8c5 <unknown>\nE       #24 0x5555c313fd18 <unknown>\nE       #25 0x5555c313ff2f <unknown>\nE       #26 0x5555c314e1bc <unknown>\nE       #27 0x7fcc47c94ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1731924453949,"stop":1731924454006,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1731924454006,"stop":1731924483907,"duration":29901},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"proxy_driver","time":{"start":1731924531218,"stop":1731924536676,"duration":5458},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1731924531218,"stop":1731924531218,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_RESET\n  (Session info: MicrosoftEdge=130.0.2849.80)\nStacktrace:\n#0 0x5555c314f5be <unknown>\n#1 0x5555c2c169f6 <unknown>\n#2 0x5555c2c1462a <unknown>\n#3 0x5555c2c00a10 <unknown>\n#4 0x5555c2c02660 <unknown>\n#5 0x5555c2c00dc4 <unknown>\n#6 0x5555c2c0062a <unknown>\n#7 0x5555c2c004b2 <unknown>\n#8 0x5555c2bfe99e <unknown>\n#9 0x5555c2bfeca7 <unknown>\n#10 0x5555c2c195d3 <unknown>\n#11 0x5555c2ca469e <unknown>\n#12 0x5555c2c85f52 <unknown>\n#13 0x5555c2ca3efe <unknown>\n#14 0x5555c2c85cf3 <unknown>\n#15 0x5555c2c562de <unknown>\n#16 0x5555c2c56fbe <unknown>\n#17 0x5555c3124521 <unknown>\n#18 0x5555c3127791 <unknown>\n#19 0x5555c312720b <unknown>\n#20 0x5555c3127bc5 <unknown>\n#21 0x5555c3115ef2 <unknown>\n#22 0x5555c3127f4d <unknown>\n#23 0x5555c30ff8c5 <unknown>\n#24 0x5555c313fd18 <unknown>\n#25 0x5555c313ff2f <unknown>\n#26 0x5555c314e1bc <unknown>\n#27 0x7fcc47c94ac3 <unknown>","statusTrace":"self = <Tests.test_AboutPage.TestAboutPage object at 0x7f0f9c9a8210>\nproxy_driver = <selenium.webdriver.edge.webdriver.WebDriver (session=\"a0658d563894786db6a9386cd8914f7e\")>\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('About page')\n    @allure.title(\"Image gallery with only one image\")\n    @allure.issue(\"QP-266\", \"Story QP-266\")\n    @allure.issue(\"QP-356\", \"Epic QP-356\")\n    @allure.testcase(\"58522\", \"C58522\")\n    @pytest.mark.parametrize(\"proxy_driver\", [\"about_page_test_9\"], indirect=True)\n    def test_9(self, proxy_driver):\n>       proxy_driver.get(BaseClass.url + \"about\")\n\nTests/test_AboutPage.py:163: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f0f9b535910>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_RESET\\\\n  (S...\\\\n#25 0x5555c313ff2f \\\\u003Cunknown>\\\\n#26 0x5555c314e1bc \\\\u003Cunknown>\\\\n#27 0x7fcc47c94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_RESET\nE         (Session info: MicrosoftEdge=130.0.2849.80)\nE       Stacktrace:\nE       #0 0x5555c314f5be <unknown>\nE       #1 0x5555c2c169f6 <unknown>\nE       #2 0x5555c2c1462a <unknown>\nE       #3 0x5555c2c00a10 <unknown>\nE       #4 0x5555c2c02660 <unknown>\nE       #5 0x5555c2c00dc4 <unknown>\nE       #6 0x5555c2c0062a <unknown>\nE       #7 0x5555c2c004b2 <unknown>\nE       #8 0x5555c2bfe99e <unknown>\nE       #9 0x5555c2bfeca7 <unknown>\nE       #10 0x5555c2c195d3 <unknown>\nE       #11 0x5555c2ca469e <unknown>\nE       #12 0x5555c2c85f52 <unknown>\nE       #13 0x5555c2ca3efe <unknown>\nE       #14 0x5555c2c85cf3 <unknown>\nE       #15 0x5555c2c562de <unknown>\nE       #16 0x5555c2c56fbe <unknown>\nE       #17 0x5555c3124521 <unknown>\nE       #18 0x5555c3127791 <unknown>\nE       #19 0x5555c312720b <unknown>\nE       #20 0x5555c3127bc5 <unknown>\nE       #21 0x5555c3115ef2 <unknown>\nE       #22 0x5555c3127f4d <unknown>\nE       #23 0x5555c30ff8c5 <unknown>\nE       #24 0x5555c313fd18 <unknown>\nE       #25 0x5555c313ff2f <unknown>\nE       #26 0x5555c314e1bc <unknown>\nE       #27 0x7fcc47c94ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","steps":[],"attachments":[{"uid":"1fb745759333f3c8","name":"stdout","source":"1fb745759333f3c8.txt","type":"text/plain","size":186}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"proxy_driver::0","time":{"start":1731924536895,"stop":1731924547072,"duration":10177},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver::0","time":{"start":1731924753260,"stop":1731924753360,"duration":100},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"About page"},{"name":"tag","value":"flaky(reruns=3, reruns_delay=1)"},{"name":"parentSuite","value":"Tests"},{"name":"suite","value":"test_AboutPage"},{"name":"subSuite","value":"TestAboutPage"},{"name":"host","value":"fv-az1113-302"},{"name":"thread","value":"1799-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_AboutPage"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"'edge'"},{"name":"proxy_driver","value":"'about_page_test_9'"}],"links":[{"name":"C58522","url":"https://hedgehoglabqa.testrail.io/index.php?/cases/view/58522","type":"tms"},{"name":"Epic QP-356","url":"https://hedgehog-lab.atlassian.net/browse/QP-356","type":"issue"},{"name":"Story QP-266","url":"https://hedgehog-lab.atlassian.net/browse/QP-266","type":"issue"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["flaky(reruns=3, reruns_delay=1)"]},"source":"6415f49dcd6cf7f4.json","parameterValues":["'edge'","'about_page_test_9'"]}