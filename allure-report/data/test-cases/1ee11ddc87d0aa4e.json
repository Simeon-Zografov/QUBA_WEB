{"uid":"1ee11ddc87d0aa4e","name":"Event carousel cards without events","fullName":"Tests.test_HomePage.TestHomePage#test_29","historyId":"9ac7a6aeb33d74cd3a8637517586188a","time":{"start":1731485606876,"stop":1731485607004,"duration":128},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_TUNNEL_CONNECTION_FAILED\n  (Session info: MicrosoftEdge=130.0.2849.56)\nStacktrace:\n#0 0x5591b662c5be <unknown>\n#1 0x5591b60f39f6 <unknown>\n#2 0x5591b60f162a <unknown>\n#3 0x5591b60dda10 <unknown>\n#4 0x5591b60df660 <unknown>\n#5 0x5591b60dddc4 <unknown>\n#6 0x5591b60dd62a <unknown>\n#7 0x5591b60dd4b2 <unknown>\n#8 0x5591b60db99e <unknown>\n#9 0x5591b60dbca7 <unknown>\n#10 0x5591b60f65d3 <unknown>\n#11 0x5591b618169e <unknown>\n#12 0x5591b6162f52 <unknown>\n#13 0x5591b6180efe <unknown>\n#14 0x5591b6162cf3 <unknown>\n#15 0x5591b61332de <unknown>\n#16 0x5591b6133fbe <unknown>\n#17 0x5591b6601521 <unknown>\n#18 0x5591b6604791 <unknown>\n#19 0x5591b660420b <unknown>\n#20 0x5591b6604bc5 <unknown>\n#21 0x5591b65f2ef2 <unknown>\n#22 0x5591b6604f4d <unknown>\n#23 0x5591b65dc8c5 <unknown>\n#24 0x5591b661cd18 <unknown>\n#25 0x5591b661cf2f <unknown>\n#26 0x5591b662b1bc <unknown>\n#27 0x7f44e9294ac3 <unknown>","statusTrace":"self = <Tests.test_HomePage.TestHomePage object at 0x7f7ca1b10250>\nproxy_driver = <selenium.webdriver.edge.webdriver.WebDriver (session=\"834d43a0c9a67d59b90db9cf15052db4\")>\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('Home page')\n    @allure.title(\"Event carousel cards without events\")\n    @allure.issue(\"QP-269\", \"Story QP-269\")\n    @allure.issue(\"QP-356\", \"Epic QP-356\")\n    @allure.testcase(\"58610\", \"C58610\")\n    # @pytest.mark.dependency(depends=[\"test_22\"])\n    @pytest.mark.parametrize(\"proxy_driver\", [\"home_page_test_29\"], indirect=True)\n    def test_29(self, proxy_driver):\n        if TestHomePage.current_browser == \"firefox\" or TestHomePage.current_browser == \"safari\":\n            pytest.skip(f\"Mitmproxy is not supported on {TestHomePage.current_browser}\")\n        # request.param = TestHomePage.current_browser\n        # proxy_driver = proxy_driver(TestHomePage.current_browser, \"home_page_test_29\")\n        # browser = TestHomePage.current_browser\n        # proxy_driver = BaseClass.proxy_driver(browser)\n>       proxy_driver.get(BaseClass.url)\n\nTests/test_HomePage.py:587: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7ca1c49dd0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_TUNNEL_CONNECTION_FAILE...\\\\n#25 0x5591b661cf2f \\\\u003Cunknown>\\\\n#26 0x5591b662b1bc \\\\u003Cunknown>\\\\n#27 0x7f44e9294ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_TUNNEL_CONNECTION_FAILED\nE         (Session info: MicrosoftEdge=130.0.2849.56)\nE       Stacktrace:\nE       #0 0x5591b662c5be <unknown>\nE       #1 0x5591b60f39f6 <unknown>\nE       #2 0x5591b60f162a <unknown>\nE       #3 0x5591b60dda10 <unknown>\nE       #4 0x5591b60df660 <unknown>\nE       #5 0x5591b60dddc4 <unknown>\nE       #6 0x5591b60dd62a <unknown>\nE       #7 0x5591b60dd4b2 <unknown>\nE       #8 0x5591b60db99e <unknown>\nE       #9 0x5591b60dbca7 <unknown>\nE       #10 0x5591b60f65d3 <unknown>\nE       #11 0x5591b618169e <unknown>\nE       #12 0x5591b6162f52 <unknown>\nE       #13 0x5591b6180efe <unknown>\nE       #14 0x5591b6162cf3 <unknown>\nE       #15 0x5591b61332de <unknown>\nE       #16 0x5591b6133fbe <unknown>\nE       #17 0x5591b6601521 <unknown>\nE       #18 0x5591b6604791 <unknown>\nE       #19 0x5591b660420b <unknown>\nE       #20 0x5591b6604bc5 <unknown>\nE       #21 0x5591b65f2ef2 <unknown>\nE       #22 0x5591b6604f4d <unknown>\nE       #23 0x5591b65dc8c5 <unknown>\nE       #24 0x5591b661cd18 <unknown>\nE       #25 0x5591b661cf2f <unknown>\nE       #26 0x5591b662b1bc <unknown>\nE       #27 0x7f44e9294ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1731485511239,"stop":1731485511311,"duration":72},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_xunit_setup_class_fixture_TestHomePage","time":{"start":1731485511312,"stop":1731485515107,"duration":3795},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1731485515107,"stop":1731485539862,"duration":24755},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1731485601413,"stop":1731485601413,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"proxy_driver","time":{"start":1731485601413,"stop":1731485606875,"duration":5462},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_TUNNEL_CONNECTION_FAILED\n  (Session info: MicrosoftEdge=130.0.2849.56)\nStacktrace:\n#0 0x5591b662c5be <unknown>\n#1 0x5591b60f39f6 <unknown>\n#2 0x5591b60f162a <unknown>\n#3 0x5591b60dda10 <unknown>\n#4 0x5591b60df660 <unknown>\n#5 0x5591b60dddc4 <unknown>\n#6 0x5591b60dd62a <unknown>\n#7 0x5591b60dd4b2 <unknown>\n#8 0x5591b60db99e <unknown>\n#9 0x5591b60dbca7 <unknown>\n#10 0x5591b60f65d3 <unknown>\n#11 0x5591b618169e <unknown>\n#12 0x5591b6162f52 <unknown>\n#13 0x5591b6180efe <unknown>\n#14 0x5591b6162cf3 <unknown>\n#15 0x5591b61332de <unknown>\n#16 0x5591b6133fbe <unknown>\n#17 0x5591b6601521 <unknown>\n#18 0x5591b6604791 <unknown>\n#19 0x5591b660420b <unknown>\n#20 0x5591b6604bc5 <unknown>\n#21 0x5591b65f2ef2 <unknown>\n#22 0x5591b6604f4d <unknown>\n#23 0x5591b65dc8c5 <unknown>\n#24 0x5591b661cd18 <unknown>\n#25 0x5591b661cf2f <unknown>\n#26 0x5591b662b1bc <unknown>\n#27 0x7f44e9294ac3 <unknown>","statusTrace":"self = <Tests.test_HomePage.TestHomePage object at 0x7f7ca1b10250>\nproxy_driver = <selenium.webdriver.edge.webdriver.WebDriver (session=\"834d43a0c9a67d59b90db9cf15052db4\")>\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('Home page')\n    @allure.title(\"Event carousel cards without events\")\n    @allure.issue(\"QP-269\", \"Story QP-269\")\n    @allure.issue(\"QP-356\", \"Epic QP-356\")\n    @allure.testcase(\"58610\", \"C58610\")\n    # @pytest.mark.dependency(depends=[\"test_22\"])\n    @pytest.mark.parametrize(\"proxy_driver\", [\"home_page_test_29\"], indirect=True)\n    def test_29(self, proxy_driver):\n        if TestHomePage.current_browser == \"firefox\" or TestHomePage.current_browser == \"safari\":\n            pytest.skip(f\"Mitmproxy is not supported on {TestHomePage.current_browser}\")\n        # request.param = TestHomePage.current_browser\n        # proxy_driver = proxy_driver(TestHomePage.current_browser, \"home_page_test_29\")\n        # browser = TestHomePage.current_browser\n        # proxy_driver = BaseClass.proxy_driver(browser)\n>       proxy_driver.get(BaseClass.url)\n\nTests/test_HomePage.py:587: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7ca1c49dd0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_TUNNEL_CONNECTION_FAILE...\\\\n#25 0x5591b661cf2f \\\\u003Cunknown>\\\\n#26 0x5591b662b1bc \\\\u003Cunknown>\\\\n#27 0x7f44e9294ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_TUNNEL_CONNECTION_FAILED\nE         (Session info: MicrosoftEdge=130.0.2849.56)\nE       Stacktrace:\nE       #0 0x5591b662c5be <unknown>\nE       #1 0x5591b60f39f6 <unknown>\nE       #2 0x5591b60f162a <unknown>\nE       #3 0x5591b60dda10 <unknown>\nE       #4 0x5591b60df660 <unknown>\nE       #5 0x5591b60dddc4 <unknown>\nE       #6 0x5591b60dd62a <unknown>\nE       #7 0x5591b60dd4b2 <unknown>\nE       #8 0x5591b60db99e <unknown>\nE       #9 0x5591b60dbca7 <unknown>\nE       #10 0x5591b60f65d3 <unknown>\nE       #11 0x5591b618169e <unknown>\nE       #12 0x5591b6162f52 <unknown>\nE       #13 0x5591b6180efe <unknown>\nE       #14 0x5591b6162cf3 <unknown>\nE       #15 0x5591b61332de <unknown>\nE       #16 0x5591b6133fbe <unknown>\nE       #17 0x5591b6601521 <unknown>\nE       #18 0x5591b6604791 <unknown>\nE       #19 0x5591b660420b <unknown>\nE       #20 0x5591b6604bc5 <unknown>\nE       #21 0x5591b65f2ef2 <unknown>\nE       #22 0x5591b6604f4d <unknown>\nE       #23 0x5591b65dc8c5 <unknown>\nE       #24 0x5591b661cd18 <unknown>\nE       #25 0x5591b661cf2f <unknown>\nE       #26 0x5591b662b1bc <unknown>\nE       #27 0x7f44e9294ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","steps":[],"attachments":[{"uid":"77b67e8a281b1ea6","name":"stdout","source":"77b67e8a281b1ea6.txt","type":"text/plain","size":544}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"proxy_driver::0","time":{"start":1731485607049,"stop":1731485607112,"duration":63},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver::0","time":{"start":1731485610992,"stop":1731485611091,"duration":99},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_xunit_setup_class_fixture_TestHomePage::0","time":{"start":1731485611091,"stop":1731485611091,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Home page"},{"name":"severity","value":"normal"},{"name":"tag","value":"flaky(reruns=3, reruns_delay=1)"},{"name":"parentSuite","value":"Tests"},{"name":"suite","value":"test_HomePage"},{"name":"subSuite","value":"TestHomePage"},{"name":"host","value":"fv-az711-920"},{"name":"thread","value":"1773-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_HomePage"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"'edge'"},{"name":"proxy_driver","value":"'home_page_test_29'"}],"links":[{"name":"C58610","url":"https://hedgehoglabqa.testrail.io/index.php?/cases/view/58610","type":"tms"},{"name":"Epic QP-356","url":"https://hedgehog-lab.atlassian.net/browse/QP-356","type":"issue"},{"name":"Story QP-269","url":"https://hedgehog-lab.atlassian.net/browse/QP-269","type":"issue"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"48b9481f05c4245c","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_TUNNEL_CONNECTION_FAILED\n  (Session info: MicrosoftEdge=130.0.2849.56)\nStacktrace:\n#0 0x55efb1aae5be <unknown>\n#1 0x55efb15759f6 <unknown>\n#2 0x55efb157362a <unknown>\n#3 0x55efb155fa10 <unknown>\n#4 0x55efb1561660 <unknown>\n#5 0x55efb155fdc4 <unknown>\n#6 0x55efb155f62a <unknown>\n#7 0x55efb155f4b2 <unknown>\n#8 0x55efb155d99e <unknown>\n#9 0x55efb155dca7 <unknown>\n#10 0x55efb15785d3 <unknown>\n#11 0x55efb160369e <unknown>\n#12 0x55efb15e4f52 <unknown>\n#13 0x55efb1602efe <unknown>\n#14 0x55efb15e4cf3 <unknown>\n#15 0x55efb15b52de <unknown>\n#16 0x55efb15b5fbe <unknown>\n#17 0x55efb1a83521 <unknown>\n#18 0x55efb1a86791 <unknown>\n#19 0x55efb1a8620b <unknown>\n#20 0x55efb1a86bc5 <unknown>\n#21 0x55efb1a74ef2 <unknown>\n#22 0x55efb1a86f4d <unknown>\n#23 0x55efb1a5e8c5 <unknown>\n#24 0x55efb1a9ed18 <unknown>\n#25 0x55efb1a9ef2f <unknown>\n#26 0x55efb1aad1bc <unknown>\n#27 0x7f921b494ac3 <unknown>","time":{"start":1731485600144,"stop":1731485600318,"duration":174}},{"uid":"bd464cbd6922ee7e","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_TUNNEL_CONNECTION_FAILED\n  (Session info: MicrosoftEdge=130.0.2849.56)\nStacktrace:\n#0 0x55674e43b5be <unknown>\n#1 0x55674df029f6 <unknown>\n#2 0x55674df0062a <unknown>\n#3 0x55674deeca10 <unknown>\n#4 0x55674deee660 <unknown>\n#5 0x55674deecdc4 <unknown>\n#6 0x55674deec62a <unknown>\n#7 0x55674deec4b2 <unknown>\n#8 0x55674deea99e <unknown>\n#9 0x55674deeaca7 <unknown>\n#10 0x55674df055d3 <unknown>\n#11 0x55674df9069e <unknown>\n#12 0x55674df71f52 <unknown>\n#13 0x55674df8fefe <unknown>\n#14 0x55674df71cf3 <unknown>\n#15 0x55674df422de <unknown>\n#16 0x55674df42fbe <unknown>\n#17 0x55674e410521 <unknown>\n#18 0x55674e413791 <unknown>\n#19 0x55674e41320b <unknown>\n#20 0x55674e413bc5 <unknown>\n#21 0x55674e401ef2 <unknown>\n#22 0x55674e413f4d <unknown>\n#23 0x55674e3eb8c5 <unknown>\n#24 0x55674e42bd18 <unknown>\n#25 0x55674e42bf2f <unknown>\n#26 0x55674e43a1bc <unknown>\n#27 0x7f69c2894ac3 <unknown>","time":{"start":1731485593332,"stop":1731485593496,"duration":164}},{"uid":"76abe59e147b9693","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_TUNNEL_CONNECTION_FAILED\n  (Session info: MicrosoftEdge=130.0.2849.56)\nStacktrace:\n#0 0x561b540105be <unknown>\n#1 0x561b53ad79f6 <unknown>\n#2 0x561b53ad562a <unknown>\n#3 0x561b53ac1a10 <unknown>\n#4 0x561b53ac3660 <unknown>\n#5 0x561b53ac1dc4 <unknown>\n#6 0x561b53ac162a <unknown>\n#7 0x561b53ac14b2 <unknown>\n#8 0x561b53abf99e <unknown>\n#9 0x561b53abfca7 <unknown>\n#10 0x561b53ada5d3 <unknown>\n#11 0x561b53b6569e <unknown>\n#12 0x561b53b46f52 <unknown>\n#13 0x561b53b64efe <unknown>\n#14 0x561b53b46cf3 <unknown>\n#15 0x561b53b172de <unknown>\n#16 0x561b53b17fbe <unknown>\n#17 0x561b53fe5521 <unknown>\n#18 0x561b53fe8791 <unknown>\n#19 0x561b53fe820b <unknown>\n#20 0x561b53fe8bc5 <unknown>\n#21 0x561b53fd6ef2 <unknown>\n#22 0x561b53fe8f4d <unknown>\n#23 0x561b53fc08c5 <unknown>\n#24 0x561b54000d18 <unknown>\n#25 0x561b54000f2f <unknown>\n#26 0x561b5400f1bc <unknown>\n#27 0x7f27ef494ac3 <unknown>","time":{"start":1731485584094,"stop":1731485586762,"duration":2668}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"928a7570c6dc2d48","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_TUNNEL_CONNECTION_FAILED\n  (Session info: MicrosoftEdge=130.0.2849.56)\nStacktrace:\n#0 0x55bdca5f25be <unknown>\n#1 0x55bdca0b99f6 <unknown>\n#2 0x55bdca0b762a <unknown>\n#3 0x55bdca0a3a10 <unknown>\n#4 0x55bdca0a5660 <unknown>\n#5 0x55bdca0a3dc4 <unknown>\n#6 0x55bdca0a362a <unknown>\n#7 0x55bdca0a34b2 <unknown>\n#8 0x55bdca0a199e <unknown>\n#9 0x55bdca0a1ca7 <unknown>\n#10 0x55bdca0bc5d3 <unknown>\n#11 0x55bdca14769e <unknown>\n#12 0x55bdca128f52 <unknown>\n#13 0x55bdca146efe <unknown>\n#14 0x55bdca128cf3 <unknown>\n#15 0x55bdca0f92de <unknown>\n#16 0x55bdca0f9fbe <unknown>\n#17 0x55bdca5c7521 <unknown>\n#18 0x55bdca5ca791 <unknown>\n#19 0x55bdca5ca20b <unknown>\n#20 0x55bdca5cabc5 <unknown>\n#21 0x55bdca5b8ef2 <unknown>\n#22 0x55bdca5caf4d <unknown>\n#23 0x55bdca5a28c5 <unknown>\n#24 0x55bdca5e2d18 <unknown>\n#25 0x55bdca5e2f2f <unknown>\n#26 0x55bdca5f11bc <unknown>\n#27 0x7f056ac94ac3 <unknown>","time":{"start":1731482652801,"stop":1731482652999,"duration":198}},{"uid":"43ca4635c4964ae3","status":"broken","statusDetails":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Microsoft Edge failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from msedge location /usr/bin/microsoft-edge is no longer running, so msedgedriver is assuming that msedge has crashed.)\nStacktrace:\n#0 0x55f23bb2d5be <unknown>\n#1 0x55f23b5f49f6 <unknown>\n#2 0x55f23b62cfde <unknown>\n#3 0x55f23b6265d9 <unknown>\n#4 0x55f23b6710c2 <unknown>\n#5 0x55f23b67030f <unknown>\n#6 0x55f23b663cf3 <unknown>\n#7 0x55f23b6342de <unknown>\n#8 0x55f23b634fbe <unknown>\n#9 0x55f23bb02521 <unknown>\n#10 0x55f23bb05791 <unknown>\n#11 0x55f23bb0520b <unknown>\n#12 0x55f23bb05bc5 <unknown>\n#13 0x55f23baf3ef2 <unknown>\n#14 0x55f23bb05f4d <unknown>\n#15 0x55f23badd8c5 <unknown>\n#16 0x55f23bb1dd18 <unknown>\n#17 0x55f23bb1df2f <unknown>\n#18 0x55f23bb2c1bc <unknown>\n#19 0x7fd9b5494ac3 <unknown>","time":{"start":1731480656151,"stop":1731480656151,"duration":0}}]},"tags":["flaky(reruns=3, reruns_delay=1)"]},"source":"1ee11ddc87d0aa4e.json","parameterValues":["'edge'","'home_page_test_29'"]}