{"uid":"66d24ec541277666","name":"Unsuccessfully login with email:  and password: Test#1234","fullName":"Tests.test_Login.TestLogin#test_2","historyId":"46cfc62142b6ef289e61356a03d78588","time":{"start":1730447153514,"stop":1730447187599,"duration":34085},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <Tests.test_Login.TestLogin object at 0x1048ed490>\ndriver = <selenium.webdriver.safari.webdriver.WebDriver (session=\"B5F332E1-4B3C-44CD-A5AD-870077EA422E\")>\nemail = '', password = 'Test#1234', error = 'Please enter your email'\nrequest = <FixtureRequest for <Function test_2[-Test#1234-Please enter your email-safari]>>\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('Login')\n    @allure.title(\"Unsuccessfully login with email: {email} and password: {password}\")\n    @pytest.mark.parametrize('email,password,error', [\n        (BaseClass.email[:-1], BaseClass.password, \"There was a problem logging you in. Please try again.\"),\n        (BaseClass.email, BaseClass.password[:-1], \"There was a problem logging you in. Please try again.\"),\n        (BaseClass.email.replace(\"@\", \"\"), BaseClass.password, \"Please enter a valid email\"),\n        (\"\", BaseClass.password, \"Please enter your email\"),\n        (BaseClass.email, \"\", \"Please enter your password\")\n    ])\n    def test_2(self, driver, email, password, error, request):\n        current_browser = request.node.callspec.params[\"driver\"]\n        login_obj = Login(driver)\n        driver.refresh()\n        login_obj.set_email_field(email, current_browser)\n        login_obj.set_password_field(password, current_browser)\n        with check, allure.step(\"Check for error\"):\n            if \"Please enter\" in error:\n>               assert login_obj.is_filed_error_message_visible()\n\nTests/test_Login.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages/LoginPage.py:46: in is_filed_error_message_visible\n    message = wait.until(EC.visibility_of_element_located(self.field_error_message))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"B5F332E1-4B3C-44CD-A5AD-870077EA422E\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x107d7cae0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1730447050632,"stop":1730447050670,"duration":38},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1730447094455,"stop":1730447096096,"duration":1641},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <Tests.test_Login.TestLogin object at 0x1048ed490>\ndriver = <selenium.webdriver.safari.webdriver.WebDriver (session=\"B5F332E1-4B3C-44CD-A5AD-870077EA422E\")>\nemail = '', password = 'Test#1234', error = 'Please enter your email'\nrequest = <FixtureRequest for <Function test_2[-Test#1234-Please enter your email-safari]>>\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('Login')\n    @allure.title(\"Unsuccessfully login with email: {email} and password: {password}\")\n    @pytest.mark.parametrize('email,password,error', [\n        (BaseClass.email[:-1], BaseClass.password, \"There was a problem logging you in. Please try again.\"),\n        (BaseClass.email, BaseClass.password[:-1], \"There was a problem logging you in. Please try again.\"),\n        (BaseClass.email.replace(\"@\", \"\"), BaseClass.password, \"Please enter a valid email\"),\n        (\"\", BaseClass.password, \"Please enter your email\"),\n        (BaseClass.email, \"\", \"Please enter your password\")\n    ])\n    def test_2(self, driver, email, password, error, request):\n        current_browser = request.node.callspec.params[\"driver\"]\n        login_obj = Login(driver)\n        driver.refresh()\n        login_obj.set_email_field(email, current_browser)\n        login_obj.set_password_field(password, current_browser)\n        with check, allure.step(\"Check for error\"):\n            if \"Please enter\" in error:\n>               assert login_obj.is_filed_error_message_visible()\n\nTests/test_Login.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages/LoginPage.py:46: in is_filed_error_message_visible\n    message = wait.until(EC.visibility_of_element_located(self.field_error_message))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"B5F332E1-4B3C-44CD-A5AD-870077EA422E\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x107d7cae0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","steps":[{"name":"Check for error","time":{"start":1730447155665,"stop":1730447187587,"duration":31922},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \n\n","statusTrace":"  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Tests/test_Login.py\", line 44, in test_2\n    assert login_obj.is_filed_error_message_visible()\n  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Pages/LoginPage.py\", line 46, in is_filed_error_message_visible\n    message = wait.until(EC.visibility_of_element_located(self.field_error_message))\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/support/wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1730447206644,"stop":1730447206742,"duration":98},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"Login"},{"name":"tag","value":"flaky(reruns=3, reruns_delay=0.5, rerun_except='assert')"},{"name":"parentSuite","value":"Tests"},{"name":"suite","value":"test_Login"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"Mac-1730446312566.local"},{"name":"thread","value":"2014-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_Login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"'safari'"},{"name":"email","value":"''"},{"name":"error","value":"'Please enter your email'"},{"name":"password","value":"'Test#1234'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a2768b0b9bb4f775","status":"broken","statusDetails":"selenium.common.exceptions.StaleElementReferenceException: Message: A node reference could not be resolved: Node with identifier 'node-F55FD87C-CE3E-4D5B-9B22-25882E0CF209' was not found; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception","time":{"start":1730447152584,"stop":1730447152845,"duration":261}},{"uid":"853ff330d19bb6de","status":"broken","statusDetails":"selenium.common.exceptions.StaleElementReferenceException: Message: A node reference could not be resolved: Node with identifier 'node-08CBE743-105B-4F6F-AFF1-8BD1055A8551' was not found; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception","time":{"start":1730447149988,"stop":1730447151927,"duration":1939}},{"uid":"78b0b7c7f1cde369","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1730447115560,"stop":1730447149398,"duration":33838}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"ee5c5291218e78d9","status":"passed","time":{"start":1730384201264,"stop":1730384203141,"duration":1877}}]},"tags":["flaky(reruns=3, reruns_delay=0.5, rerun_except='assert')"]},"source":"66d24ec541277666.json","parameterValues":["'safari'","''","'Please enter your email'","'Test#1234'"]}