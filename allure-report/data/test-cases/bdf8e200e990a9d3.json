{"uid":"bdf8e200e990a9d3","name":"Successful message send","fullName":"Tests.test_ContactPage.TestContactPage#test_2","historyId":"c215c51156221bee009195390ca8046d","time":{"start":1730604722049,"stop":1730604722049,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: MicrosoftEdge=129.0.2792.89)\nStacktrace:\n#0 0x558c9fe2a1ae <unknown>\n#1 0x558c9faed686 <unknown>\n#2 0x558c9fad6bc8 <unknown>\n#3 0x558c9fad6992 <unknown>\n#4 0x558c9fad4de4 <unknown>\n#5 0x558c9fad5254 <unknown>\n#6 0x558c9fae9c37 <unknown>\n#7 0x558c9faf989e <unknown>\n#8 0x558c9fafe9cb <unknown>\n#9 0x558c9fad5845 <unknown>\n#10 0x558c9faf9520 <unknown>\n#11 0x558c9fb81572 <unknown>\n#12 0x558c9fb62013 <unknown>\n#13 0x558c9fb3019d <unknown>\n#14 0x558c9fb30e8e <unknown>\n#15 0x558c9fdfd161 <unknown>\n#16 0x558c9fe003cd <unknown>\n#17 0x558c9fdffe4b <unknown>\n#18 0x558c9fe00835 <unknown>\n#19 0x558c9fdee7c2 <unknown>\n#20 0x558c9fe00bbd <unknown>\n#21 0x558c9fdd92b5 <unknown>\n#22 0x558c9fe1a738 <unknown>\n#23 0x558c9fe1a94d <unknown>\n#24 0x558c9fe28ff1 <unknown>\n#25 0x7f7709c94ac3 <unknown>","statusTrace":"self = <Tests.test_ContactPage.TestContactPage object at 0x7f3e389f70d0>\nrequest = <SubRequest 'driver' for <Function test_1[edge]>>\n\n    @pytest.fixture(scope=\"class\", autouse=True)\n    def driver(self, request):\n        browser = request.param\n    \n        project_folder = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    \n        is_ci = os.getenv('CI') == 'true'\n        if is_ci:\n            if browser == \"edge\":\n                # Set up Edge options\n                options = EdgeOptions()\n                options.add_argument(\"--headless\")\n                options.add_argument(\"--disable-gpu\")\n                options.add_argument(\"--no-sandbox\")\n                options.add_argument(\"--disable-dev-shm-usage\")\n                options.add_argument(\"--disable-extensions\")\n                options.add_argument(\"--disable-infobars\")\n                serv = EdgeService(EdgeChromiumDriverManager().install())\n                driver = webdriver.Edge(service=serv, options=options)\n            elif browser == \"chrome\":\n                options = ChromeOptions()\n                options.add_argument(\"--headless\")\n                options.add_argument(\"--disable-gpu\")\n                options.add_argument(\"--no-sandbox\")\n                options.add_argument(\"--disable-dev-shm-usage\")\n                options.add_argument(\"--disable-extensions\")\n                options.add_argument(\"--disable-infobars\")\n                '''chrome_driver_path = \"/usr/local/share/chrome_driver/chromedriver\"\n                serv = ChromeService(executable_path=chrome_driver_path)\n                driver = webdriver.Chrome(service=serv, options=options)'''\n                chrome_driver_path = \"/usr/bin/chromedriver\"\n                serv = ChromeService(chrome_driver_path)\n                driver = webdriver.Chrome(service=serv, options=options)\n            elif browser == \"firefox\":\n                options = FirefoxOptions()\n                options.add_argument(\"--headless\")\n                geckodriver_driver_path = \"/usr/bin/geckodriver\"\n                serv = FirefoxService(geckodriver_driver_path)\n                driver = webdriver.Firefox(service=serv, options=options)\n                # options.headless = True\n                # driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)\n            else:\n                options = SafariOptions()\n                options.page_load_strategy = 'eager'\n                driver = webdriver.Safari(options=options)\n        else:\n            if browser == \"edge\":\n                # edge_driver_path = os.path.join(project_folder, 'Resources', 'msedgedriver')\n                # serv = EdgeService(edge_driver_path)\n                # driver = webdriver.Edge(service=serv)\n                driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()))\n            elif browser == \"chrome\":\n                chrome_driver_path = os.path.join(project_folder, 'Resources', 'chromedriver')\n                serv = ChromeService(chrome_driver_path)\n                driver = webdriver.Chrome(service=serv)\n                # driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()))\n            elif browser == \"firefox\":\n                # firefox_driver_path = os.path.join(project_folder, 'Resources', 'geckodriver')\n                # serv = FirefoxService(firefox_driver_path)\n                # driver = webdriver.Firefox(service=serv)\n                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()))\n            else:\n                options = SafariOptions()\n                options.page_load_strategy = 'eager'\n                driver = webdriver.Safari(options=options)\n    \n        driver.implicitly_wait(10)\n>       driver.maximize_window()\n\nCommon/BaseClass.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:499: in maximize_window\n    self.execute(command, None)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3e37c5d010>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...\\\\n#23 0x558c9fe1a94d \\\\u003Cunknown>\\\\n#24 0x558c9fe28ff1 \\\\u003Cunknown>\\\\n#25 0x7f7709c94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: MicrosoftEdge=129.0.2792.89)\nE       Stacktrace:\nE       #0 0x558c9fe2a1ae <unknown>\nE       #1 0x558c9faed686 <unknown>\nE       #2 0x558c9fad6bc8 <unknown>\nE       #3 0x558c9fad6992 <unknown>\nE       #4 0x558c9fad4de4 <unknown>\nE       #5 0x558c9fad5254 <unknown>\nE       #6 0x558c9fae9c37 <unknown>\nE       #7 0x558c9faf989e <unknown>\nE       #8 0x558c9fafe9cb <unknown>\nE       #9 0x558c9fad5845 <unknown>\nE       #10 0x558c9faf9520 <unknown>\nE       #11 0x558c9fb81572 <unknown>\nE       #12 0x558c9fb62013 <unknown>\nE       #13 0x558c9fb3019d <unknown>\nE       #14 0x558c9fb30e8e <unknown>\nE       #15 0x558c9fdfd161 <unknown>\nE       #16 0x558c9fe003cd <unknown>\nE       #17 0x558c9fdffe4b <unknown>\nE       #18 0x558c9fe00835 <unknown>\nE       #19 0x558c9fdee7c2 <unknown>\nE       #20 0x558c9fe00bbd <unknown>\nE       #21 0x558c9fdd92b5 <unknown>\nE       #22 0x558c9fe1a738 <unknown>\nE       #23 0x558c9fe1a94d <unknown>\nE       #24 0x558c9fe28ff1 <unknown>\nE       #25 0x7f7709c94ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1730604378330,"stop":1730604378385,"duration":55},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1730604378385,"stop":1730604721984,"duration":343599},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: MicrosoftEdge=129.0.2792.89)\nStacktrace:\n#0 0x558c9fe2a1ae <unknown>\n#1 0x558c9faed686 <unknown>\n#2 0x558c9fad6bc8 <unknown>\n#3 0x558c9fad6992 <unknown>\n#4 0x558c9fad4de4 <unknown>\n#5 0x558c9fad5254 <unknown>\n#6 0x558c9fae9c37 <unknown>\n#7 0x558c9faf989e <unknown>\n#8 0x558c9fafe9cb <unknown>\n#9 0x558c9fad5845 <unknown>\n#10 0x558c9faf9520 <unknown>\n#11 0x558c9fb81572 <unknown>\n#12 0x558c9fb62013 <unknown>\n#13 0x558c9fb3019d <unknown>\n#14 0x558c9fb30e8e <unknown>\n#15 0x558c9fdfd161 <unknown>\n#16 0x558c9fe003cd <unknown>\n#17 0x558c9fdffe4b <unknown>\n#18 0x558c9fe00835 <unknown>\n#19 0x558c9fdee7c2 <unknown>\n#20 0x558c9fe00bbd <unknown>\n#21 0x558c9fdd92b5 <unknown>\n#22 0x558c9fe1a738 <unknown>\n#23 0x558c9fe1a94d <unknown>\n#24 0x558c9fe28ff1 <unknown>\n#25 0x7f7709c94ac3 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 166, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 102, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 1132, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 906, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/home/runner/work/QUBA_WEB/QUBA_WEB/Common/BaseClass.py\", line 100, in driver\n    driver.maximize_window()\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 499, in maximize_window\n    self.execute(command, None)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"Contact page"},{"name":"severity","value":"critical"},{"name":"parentSuite","value":"Tests"},{"name":"suite","value":"test_ContactPage"},{"name":"subSuite","value":"TestContactPage"},{"name":"host","value":"fv-az570-505"},{"name":"thread","value":"1738-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_ContactPage"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"'edge'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"4919982169a65e6f","status":"passed","time":{"start":1730463493662,"stop":1730463510758,"duration":17096}},{"uid":"96e36397da01d75b","status":"passed","time":{"start":1730460717004,"stop":1730460734051,"duration":17047}}]},"tags":[]},"source":"bdf8e200e990a9d3.json","parameterValues":["'edge'"]}