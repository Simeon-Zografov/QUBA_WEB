{"name": "Check language switch", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status 1", "trace": "self = <Tests.test_HomePage.TestHomePage object at 0x7fadced7ddd0>\nrequest = <SubRequest 'driver' for <Function test_1[firefox]>>\n\n    @pytest.fixture(scope=\"class\", autouse=True)\n    def driver(self, request):\n        browser = request.param\n    \n        project_folder = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    \n        is_ci = os.getenv('CI') == 'true'\n        if is_ci:\n            if browser == \"edge\":\n                # Set up Edge options\n                options = EdgeOptions()\n                options.add_argument(\"--headless\")\n                options.add_argument(\"--disable-gpu\")\n                options.add_argument(\"--no-sandbox\")\n                options.add_argument(\"--disable-dev-shm-usage\")\n                options.add_argument(\"--disable-extensions\")\n                options.add_argument(\"--disable-infobars\")\n                serv = EdgeService(EdgeChromiumDriverManager().install())\n                driver = webdriver.Edge(service=serv, options=options)\n            elif browser == \"chrome\":\n                options = ChromeOptions()\n                options.add_argument(\"--headless\")\n                options.add_argument(\"--disable-gpu\")\n                options.add_argument(\"--no-sandbox\")\n                options.add_argument(\"--disable-dev-shm-usage\")\n                options.add_argument(\"--disable-extensions\")\n                options.add_argument(\"--disable-infobars\")\n                '''chrome_driver_path = \"/usr/local/share/chrome_driver/chromedriver\"\n                serv = ChromeService(executable_path=chrome_driver_path)\n                driver = webdriver.Chrome(service=serv, options=options)'''\n                chrome_driver_path = \"/usr/bin/chromedriver\"\n                serv = ChromeService(chrome_driver_path)\n                driver = webdriver.Chrome(service=serv, options=options)\n            elif browser == \"firefox\":\n                options = FirefoxOptions()\n                options.headless = True\n>               driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)\n\nCommon/BaseClass.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/firefox/webdriver.py:69: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:208: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fadceed3650>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"Process unexpectedly closed with status 1\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status 1\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException"}, "parameters": [{"name": "driver", "value": "'firefox'"}], "start": 1730383362172, "stop": 1730383362172, "uuid": "7a2fa30b-933e-4936-a653-af2b42acb3ee", "historyId": "d62caebb55e09e5b2db95ad6230e4a4b", "testCaseId": "2679f1410e1b8d9c003229d7653d4437", "fullName": "Tests.test_HomePage.TestHomePage#test_3", "labels": [{"name": "feature", "value": "Home page"}, {"name": "severity", "value": "normal"}, {"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_HomePage"}, {"name": "subSuite", "value": "TestHomePage"}, {"name": "host", "value": "fv-az1490-394"}, {"name": "thread", "value": "1748-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_HomePage"}]}