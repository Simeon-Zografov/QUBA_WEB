{"uid":"b9dec5a56936dbbb","name":"Event carousel cards without events","fullName":"Tests.test_HomePage.TestHomePage#test_29","historyId":"e15325a007d1cb03d699fc03ac31e841","time":{"start":1731482635269,"stop":1731482635269,"duration":0},"status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'implicitly_wait'","statusTrace":"self = <Tests.test_HomePage.TestHomePage object at 0x7fdaf6bfbd50>\nrequest = <SubRequest 'proxy_driver' for <Function test_29[home_page_test_29-firefox]>>\n\n    @pytest.fixture(scope=\"function\", autouse=False)\n    def proxy_driver(self, request):\n        browser = request.node.callspec.params[\"driver\"]\n        test_name = request.param\n        print(browser)\n        print(test_name)\n        # browser = getattr(request, \"param\", None)\n        project_folder = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n        mitmdump_path = shutil.which(\"mitmdump\")\n        script_path = os.path.join(project_folder, \"Common\", \"ResponseInterception.py\")\n        print(\"Proxy fixture started\")\n    \n        if mitmdump_path is None:\n            raise FileNotFoundError(\"mitmdump executable not found in PATH. Please ensure mitmproxy is installed.\")\n        if browser == \"chrome\":\n            port = \"8082\"\n        elif browser == \"edge\":\n            port = \"8084\"\n        else:\n            port = \"8081\"\n        # port = \"8082\"\n        mitmdump_process = subprocess.Popen([mitmdump_path, \"-s\", script_path, \"--listen-port\", port,\n                                             \"--set\", f\"test_name={test_name}\"])\n        print(\"Proxy subprocess started\")\n        if os.getenv('CI') == 'true':\n            if browser == \"chrome\":\n                options = ChromeOptions()\n                options.add_argument(\"--headless\")\n                options.add_argument(\"--disable-gpu\")\n                options.add_argument(\"--no-sandbox\")\n                options.add_argument(\"--disable-dev-shm-usage\")\n                options.add_argument(\"--disable-extensions\")\n                options.add_argument(\"--disable-infobars\")\n                options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')\n                options.add_argument('--ignore-certificate-errors')\n                chrome_driver_path = \"/usr/bin/chromedriver\"\n                serv = ChromeService(chrome_driver_path)\n                proxy_driver = webdriver.Chrome(service=serv, options=options)\n            elif browser == \"edge\":\n                options = EdgeOptions()\n                options.add_argument(\"--headless\")\n                options.add_argument(\"--disable-gpu\")\n                options.add_argument(\"--no-sandbox\")\n                options.add_argument(\"--disable-dev-shm-usage\")\n                options.add_argument(\"--disable-extensions\")\n                options.add_argument(\"--disable-infobars\")\n                options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')\n                options.add_argument('--ignore-certificate-errors')\n                serv = EdgeService(EdgeChromiumDriverManager().install())\n                proxy_driver = webdriver.Edge(service=serv, options=options)\n            else:\n                proxy_driver = None\n                print(\"Unsupported on the browser\")\n        else:\n            if browser == \"chrome\":\n                chrome_driver_path = os.path.join(project_folder, 'Resources', 'chromedriver')\n                options = webdriver.ChromeOptions()\n                options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')  # mitmproxy default proxy\n                options.add_argument('--ignore-certificate-errors')  # Bypass cert errors if needed for testing\n    \n                serv = ChromeService(chrome_driver_path)\n                proxy_driver = webdriver.Chrome(service=serv, options=options)\n            elif browser == \"edge\":\n                options = webdriver.EdgeOptions()\n                options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')  # mitmproxy default proxy\n                options.add_argument('--ignore-certificate-errors')  # Bypass cert errors if needed for testing\n    \n                proxy_driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)\n            else:\n                proxy_driver = None\n                print(\"Unsupported on the browser\")\n            # elif browser == \"firefox\":\n            #     options = FirefoxOptions()\n            #     # firefox_profile = webdriver.FirefoxProfile()\n            #     # Specify to use manual proxy configuration.\n            #     options.set_preference('network.proxy.type', 1)\n            #     # Set the host/port.\n            #     options.set_preference('network.proxy.http', 'http://127.0.0.1')\n            #     options.set_preference('network.proxy.https_port', port)\n            #     options.set_preference('network.proxy.ssl', 'http://127.0.0.1')\n            #     options.set_preference('network.proxy.ssl_port', port)\n            #     # options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')\n            #     # options.set_preference(\"security.enterprise_roots.enabled\", True)\n            #     # options.set_preference(\"network.proxy.allow_hijacking_localhost\", True)\n            #     # options.set_preference(\"devtools.console.stdout.content\", True)\n            #\n            #     proxy_driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)\n            # else:\n            #     options = SafariOptions()\n            #     options.page_load_strategy = 'eager'\n            #     proxy_driver = webdriver.Safari(options=options)\n        print(\"Proxy driver created\")\n>       proxy_driver.implicitly_wait(10)\nE       AttributeError: 'NoneType' object has no attribute 'implicitly_wait'\n\nCommon/BaseClass.py:203: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1731482582274,"stop":1731482582342,"duration":68},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_xunit_setup_class_fixture_TestHomePage","time":{"start":1731482582343,"stop":1731482585494,"duration":3151},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1731482585494,"stop":1731482593924,"duration":8430},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1731482635269,"stop":1731482635269,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"proxy_driver","time":{"start":1731482635269,"stop":1731482635270,"duration":1},"status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'implicitly_wait'\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 166, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 102, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 1132, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 906, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/home/runner/work/QUBA_WEB/QUBA_WEB/Common/BaseClass.py\", line 203, in proxy_driver\n    proxy_driver.implicitly_wait(10)\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'implicitly_wait'","statusTrace":"self = <Tests.test_HomePage.TestHomePage object at 0x7fdaf6bfbd50>\nrequest = <SubRequest 'proxy_driver' for <Function test_29[home_page_test_29-firefox]>>\n\n    @pytest.fixture(scope=\"function\", autouse=False)\n    def proxy_driver(self, request):\n        browser = request.node.callspec.params[\"driver\"]\n        test_name = request.param\n        print(browser)\n        print(test_name)\n        # browser = getattr(request, \"param\", None)\n        project_folder = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n        mitmdump_path = shutil.which(\"mitmdump\")\n        script_path = os.path.join(project_folder, \"Common\", \"ResponseInterception.py\")\n        print(\"Proxy fixture started\")\n    \n        if mitmdump_path is None:\n            raise FileNotFoundError(\"mitmdump executable not found in PATH. Please ensure mitmproxy is installed.\")\n        if browser == \"chrome\":\n            port = \"8082\"\n        elif browser == \"edge\":\n            port = \"8084\"\n        else:\n            port = \"8081\"\n        # port = \"8082\"\n        mitmdump_process = subprocess.Popen([mitmdump_path, \"-s\", script_path, \"--listen-port\", port,\n                                             \"--set\", f\"test_name={test_name}\"])\n        print(\"Proxy subprocess started\")\n        if os.getenv('CI') == 'true':\n            if browser == \"chrome\":\n                options = ChromeOptions()\n                options.add_argument(\"--headless\")\n                options.add_argument(\"--disable-gpu\")\n                options.add_argument(\"--no-sandbox\")\n                options.add_argument(\"--disable-dev-shm-usage\")\n                options.add_argument(\"--disable-extensions\")\n                options.add_argument(\"--disable-infobars\")\n                options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')\n                options.add_argument('--ignore-certificate-errors')\n                chrome_driver_path = \"/usr/bin/chromedriver\"\n                serv = ChromeService(chrome_driver_path)\n                proxy_driver = webdriver.Chrome(service=serv, options=options)\n            elif browser == \"edge\":\n                options = EdgeOptions()\n                options.add_argument(\"--headless\")\n                options.add_argument(\"--disable-gpu\")\n                options.add_argument(\"--no-sandbox\")\n                options.add_argument(\"--disable-dev-shm-usage\")\n                options.add_argument(\"--disable-extensions\")\n                options.add_argument(\"--disable-infobars\")\n                options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')\n                options.add_argument('--ignore-certificate-errors')\n                serv = EdgeService(EdgeChromiumDriverManager().install())\n                proxy_driver = webdriver.Edge(service=serv, options=options)\n            else:\n                proxy_driver = None\n                print(\"Unsupported on the browser\")\n        else:\n            if browser == \"chrome\":\n                chrome_driver_path = os.path.join(project_folder, 'Resources', 'chromedriver')\n                options = webdriver.ChromeOptions()\n                options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')  # mitmproxy default proxy\n                options.add_argument('--ignore-certificate-errors')  # Bypass cert errors if needed for testing\n    \n                serv = ChromeService(chrome_driver_path)\n                proxy_driver = webdriver.Chrome(service=serv, options=options)\n            elif browser == \"edge\":\n                options = webdriver.EdgeOptions()\n                options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')  # mitmproxy default proxy\n                options.add_argument('--ignore-certificate-errors')  # Bypass cert errors if needed for testing\n    \n                proxy_driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)\n            else:\n                proxy_driver = None\n                print(\"Unsupported on the browser\")\n            # elif browser == \"firefox\":\n            #     options = FirefoxOptions()\n            #     # firefox_profile = webdriver.FirefoxProfile()\n            #     # Specify to use manual proxy configuration.\n            #     options.set_preference('network.proxy.type', 1)\n            #     # Set the host/port.\n            #     options.set_preference('network.proxy.http', 'http://127.0.0.1')\n            #     options.set_preference('network.proxy.https_port', port)\n            #     options.set_preference('network.proxy.ssl', 'http://127.0.0.1')\n            #     options.set_preference('network.proxy.ssl_port', port)\n            #     # options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')\n            #     # options.set_preference(\"security.enterprise_roots.enabled\", True)\n            #     # options.set_preference(\"network.proxy.allow_hijacking_localhost\", True)\n            #     # options.set_preference(\"devtools.console.stdout.content\", True)\n            #\n            #     proxy_driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)\n            # else:\n            #     options = SafariOptions()\n            #     options.page_load_strategy = 'eager'\n            #     proxy_driver = webdriver.Safari(options=options)\n        print(\"Proxy driver created\")\n>       proxy_driver.implicitly_wait(10)\nE       AttributeError: 'NoneType' object has no attribute 'implicitly_wait'\n\nCommon/BaseClass.py:203: AttributeError","steps":[],"attachments":[{"uid":"1cdf55d0cf0c5414","name":"stdout","source":"1cdf55d0cf0c5414.txt","type":"text/plain","size":1142},{"uid":"e3c42b129a1234f","name":"stderr","source":"e3c42b129a1234f.txt","type":"text/plain","size":80}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1731482638505,"stop":1731482639279,"duration":774},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_xunit_setup_class_fixture_TestHomePage::0","time":{"start":1731482639279,"stop":1731482639279,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"Home page"},{"name":"tag","value":"flaky(reruns=3, reruns_delay=1)"},{"name":"parentSuite","value":"Tests"},{"name":"suite","value":"test_HomePage"},{"name":"subSuite","value":"TestHomePage"},{"name":"host","value":"fv-az1121-557"},{"name":"thread","value":"1744-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_HomePage"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"'firefox'"},{"name":"proxy_driver","value":"'home_page_test_29'"}],"links":[{"name":"C58610","url":"https://hedgehoglabqa.testrail.io/index.php?/cases/view/58610","type":"tms"},{"name":"Epic QP-356","url":"https://hedgehog-lab.atlassian.net/browse/QP-356","type":"issue"},{"name":"Story QP-269","url":"https://hedgehog-lab.atlassian.net/browse/QP-269","type":"issue"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"831b9563c07f0ca5","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'implicitly_wait'","time":{"start":1731482634259,"stop":1731482634259,"duration":0}},{"uid":"163664b4acabd03c","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'implicitly_wait'","time":{"start":1731482633249,"stop":1731482633249,"duration":0}},{"uid":"3985a7694298f75e","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'implicitly_wait'","time":{"start":1731482632238,"stop":1731482632238,"duration":0}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"1da59e3b7e5f1f02","status":"broken","statusDetails":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Microsoft Edge failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from msedge location /usr/bin/microsoft-edge is no longer running, so msedgedriver is assuming that msedge has crashed.)\nStacktrace:\n#0 0x555ecac5f5be <unknown>\n#1 0x555eca7269f6 <unknown>\n#2 0x555eca75efde <unknown>\n#3 0x555eca7585d9 <unknown>\n#4 0x555eca7a30c2 <unknown>\n#5 0x555eca7a230f <unknown>\n#6 0x555eca795cf3 <unknown>\n#7 0x555eca7662de <unknown>\n#8 0x555eca766fbe <unknown>\n#9 0x555ecac34521 <unknown>\n#10 0x555ecac37791 <unknown>\n#11 0x555ecac3720b <unknown>\n#12 0x555ecac37bc5 <unknown>\n#13 0x555ecac25ef2 <unknown>\n#14 0x555ecac37f4d <unknown>\n#15 0x555ecac0f8c5 <unknown>\n#16 0x555ecac4fd18 <unknown>\n#17 0x555ecac4ff2f <unknown>\n#18 0x555ecac5e1bc <unknown>\n#19 0x7fee1b894ac3 <unknown>","time":{"start":1731480673430,"stop":1731480673430,"duration":0}}]},"tags":["flaky(reruns=3, reruns_delay=1)"]},"source":"b9dec5a56936dbbb.json","parameterValues":["'firefox'","'home_page_test_29'"]}