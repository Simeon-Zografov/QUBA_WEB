{"uid":"8cdbe0f6cb2a3178","name":"Event carousel cards without events","fullName":"Tests.test_HomePage.TestHomePage#test_29","historyId":"1a6690ef32784c10be94e03a5c9e455c","time":{"start":1731480632431,"stop":1731480632431,"duration":0},"status":"broken","statusMessage":"OSError: [Errno 8] Exec format error: '/home/runner/work/QUBA_WEB/QUBA_WEB/Resources/chromedriver'","statusTrace":"self = <Tests.test_HomePage.TestHomePage object at 0x7fc6878f5590>\nrequest = <SubRequest 'proxy_driver' for <Function test_29[home_page_test_29-chrome]>>\n\n    @pytest.fixture(scope=\"function\", autouse=False)\n    def proxy_driver(self, request):\n        browser = request.node.callspec.params[\"driver\"]\n        test_name = request.param\n        print(browser)\n        print(test_name)\n        # browser = getattr(request, \"param\", None)\n        project_folder = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n        mitmdump_path = shutil.which(\"mitmdump\")\n        script_path = os.path.join(project_folder, \"Common\", \"ResponseInterception.py\")\n        print(\"Proxy fixture started\")\n    \n        if mitmdump_path is None:\n            raise FileNotFoundError(\"mitmdump executable not found in PATH. Please ensure mitmproxy is installed.\")\n        if browser == \"chrome\":\n            port = \"8082\"\n        elif browser == \"edge\":\n            port = \"8084\"\n        else:\n            port = \"8081\"\n        # port = \"8082\"\n        mitmdump_process = subprocess.Popen([mitmdump_path, \"-s\", script_path, \"--listen-port\", port,\n                                             \"--set\", f\"test_name={test_name}\"])\n        print(\"Proxy subprocess started\")\n        if browser == \"chrome\":\n            chrome_driver_path = os.path.join(project_folder, 'Resources', 'chromedriver')\n            options = webdriver.ChromeOptions()\n            options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')  # mitmproxy default proxy\n            options.add_argument('--ignore-certificate-errors')  # Bypass cert errors if needed for testing\n    \n            serv = ChromeService(chrome_driver_path)\n>           proxy_driver = webdriver.Chrome(service=serv, options=options)\n\nCommon/BaseClass.py:142: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py:50: in __init__\n    self.service.start()\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/common/service.py:98: in start\n    self._start_process(self._path)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/common/service.py:208: in _start_process\n    self.process = subprocess.Popen(\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/subprocess.py:1026: in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Popen: returncode: 255 args: ['/home/runner/work/QUBA_WEB/QUBA_WEB/Resource...>\nargs = ['/home/runner/work/QUBA_WEB/QUBA_WEB/Resources/chromedriver', '--port=32883']\nexecutable = b'/home/runner/work/QUBA_WEB/QUBA_WEB/Resources/chromedriver'\npreexec_fn = None, close_fds = True, pass_fds = (), cwd = None\nenv = environ({'SELENIUM_JAR_PATH': '/usr/share/java/selenium-server.jar', 'CONDA': '/usr/share/miniconda', 'GITHUB_WORKSPAC...bin/pytest', 'PYTEST_CURRENT_TEST': 'Tests/test_HomePage.py::TestHomePage::test_29[home_page_test_29-chrome] (setup)'})\nstartupinfo = None, creationflags = 0, shell = False, p2cread = 13\np2cwrite = 14, c2pread = -1, c2pwrite = 15, errread = -1, errwrite = 15\nrestore_signals = True, gid = None, gids = None, uid = None, umask = -1\nstart_new_session = False, process_group = -1\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       restore_signals,\n                       gid, gids, uid, umask,\n                       start_new_session, process_group):\n        \"\"\"Execute program (POSIX version)\"\"\"\n    \n        if isinstance(args, (str, bytes)):\n            args = [args]\n        elif isinstance(args, os.PathLike):\n            if shell:\n                raise TypeError('path-like args is not allowed when '\n                                'shell is true')\n            args = [args]\n        else:\n            args = list(args)\n    \n        if shell:\n            # On Android the default shell is at '/system/bin/sh'.\n            unix_shell = ('/system/bin/sh' if\n                      hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n            args = [unix_shell, \"-c\"] + args\n            if executable:\n                args[0] = executable\n    \n        if executable is None:\n            executable = args[0]\n    \n        sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n    \n        if (_USE_POSIX_SPAWN\n                and os.path.dirname(executable)\n                and preexec_fn is None\n                and not close_fds\n                and not pass_fds\n                and cwd is None\n                and (p2cread == -1 or p2cread > 2)\n                and (c2pwrite == -1 or c2pwrite > 2)\n                and (errwrite == -1 or errwrite > 2)\n                and not start_new_session\n                and process_group == -1\n                and gid is None\n                and gids is None\n                and uid is None\n                and umask < 0):\n            self._posix_spawn(args, executable, env, restore_signals,\n                              p2cread, p2cwrite,\n                              c2pread, c2pwrite,\n                              errread, errwrite)\n            return\n    \n        orig_executable = executable\n    \n        # For transferring possible exec failure from child to parent.\n        # Data format: \"exception name:hex errno:description\"\n        # Pickle is not used; it is complex and involves memory allocation.\n        errpipe_read, errpipe_write = os.pipe()\n        # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n        low_fds_to_close = []\n        while errpipe_write < 3:\n            low_fds_to_close.append(errpipe_write)\n            errpipe_write = os.dup(errpipe_write)\n        for low_fd in low_fds_to_close:\n            os.close(low_fd)\n        try:\n            try:\n                # We must avoid complex work that could involve\n                # malloc or free in the child process to avoid\n                # potential deadlocks, thus we do all this here.\n                # and pass it to fork_exec()\n    \n                if env is not None:\n                    env_list = []\n                    for k, v in env.items():\n                        k = os.fsencode(k)\n                        if b'=' in k:\n                            raise ValueError(\"illegal environment variable name\")\n                        env_list.append(k + b'=' + os.fsencode(v))\n                else:\n                    env_list = None  # Use execv instead of execve.\n                executable = os.fsencode(executable)\n                if os.path.dirname(executable):\n                    executable_list = (executable,)\n                else:\n                    # This matches the behavior of os._execvpe().\n                    executable_list = tuple(\n                        os.path.join(os.fsencode(dir), executable)\n                        for dir in os.get_exec_path(env))\n                fds_to_keep = set(pass_fds)\n                fds_to_keep.add(errpipe_write)\n                self.pid = _fork_exec(\n                        args, executable_list,\n                        close_fds, tuple(sorted(map(int, fds_to_keep))),\n                        cwd, env_list,\n                        p2cread, p2cwrite, c2pread, c2pwrite,\n                        errread, errwrite,\n                        errpipe_read, errpipe_write,\n                        restore_signals, start_new_session,\n                        process_group, gid, gids, uid, umask,\n                        preexec_fn, _USE_VFORK)\n                self._child_created = True\n            finally:\n                # be sure the FD is closed no matter what\n                os.close(errpipe_write)\n    \n            self._close_pipe_fds(p2cread, p2cwrite,\n                                 c2pread, c2pwrite,\n                                 errread, errwrite)\n    \n            # Wait for exec to fail or succeed; possibly raising an\n            # exception (limited in size)\n            errpipe_data = bytearray()\n            while True:\n                part = os.read(errpipe_read, 50000)\n                errpipe_data += part\n                if not part or len(errpipe_data) > 50000:\n                    break\n        finally:\n            # be sure the FD is closed no matter what\n            os.close(errpipe_read)\n    \n        if errpipe_data:\n            try:\n                pid, sts = os.waitpid(self.pid, 0)\n                if pid == self.pid:\n                    self._handle_exitstatus(sts)\n                else:\n                    self.returncode = sys.maxsize\n            except ChildProcessError:\n                pass\n    \n            try:\n                exception_name, hex_errno, err_msg = (\n                        errpipe_data.split(b':', 2))\n                # The encoding here should match the encoding\n                # written in by the subprocess implementations\n                # like _posixsubprocess\n                err_msg = err_msg.decode()\n            except ValueError:\n                exception_name = b'SubprocessError'\n                hex_errno = b'0'\n                err_msg = 'Bad exception data from child: {!r}'.format(\n                              bytes(errpipe_data))\n            child_exception_type = getattr(\n                    builtins, exception_name.decode('ascii'),\n                    SubprocessError)\n            if issubclass(child_exception_type, OSError) and hex_errno:\n                errno_num = int(hex_errno, 16)\n                if err_msg == \"noexec:chdir\":\n                    err_msg = \"\"\n                    # The error must be from chdir(cwd).\n                    err_filename = cwd\n                elif err_msg == \"noexec\":\n                    err_msg = \"\"\n                    err_filename = None\n                else:\n                    err_filename = orig_executable\n                if errno_num != 0:\n                    err_msg = os.strerror(errno_num)\n                if err_filename is not None:\n>                   raise child_exception_type(errno_num, err_msg, err_filename)\nE                   OSError: [Errno 8] Exec format error: '/home/runner/work/QUBA_WEB/QUBA_WEB/Resources/chromedriver'\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/subprocess.py:1955: OSError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1731480591154,"stop":1731480591222,"duration":68},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_xunit_setup_class_fixture_TestHomePage","time":{"start":1731480591223,"stop":1731480594864,"duration":3641},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1731480594864,"stop":1731480595668,"duration":804},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"proxy_driver","time":{"start":1731480632431,"stop":1731480632434,"duration":3},"status":"broken","statusMessage":"OSError: [Errno 8] Exec format error: '/home/runner/work/QUBA_WEB/QUBA_WEB/Resources/chromedriver'\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 166, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 102, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 1132, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 906, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/home/runner/work/QUBA_WEB/QUBA_WEB/Common/BaseClass.py\", line 142, in proxy_driver\n    proxy_driver = webdriver.Chrome(service=serv, options=options)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/chrome/webdriver.py\", line 45, in __init__\n    super().__init__(\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py\", line 50, in __init__\n    self.service.start()\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/common/service.py\", line 98, in start\n    self._start_process(self._path)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/common/service.py\", line 208, in _start_process\n    self.process = subprocess.Popen(\n                   ^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/subprocess.py\", line 1026, in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/subprocess.py\", line 1955, in _execute_child\n    raise child_exception_type(errno_num, err_msg, err_filename)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"setup","time":{"start":1731480632431,"stop":1731480632431,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"OSError: [Errno 8] Exec format error: '/home/runner/work/QUBA_WEB/QUBA_WEB/Resources/chromedriver'","statusTrace":"self = <Tests.test_HomePage.TestHomePage object at 0x7fc6878f5590>\nrequest = <SubRequest 'proxy_driver' for <Function test_29[home_page_test_29-chrome]>>\n\n    @pytest.fixture(scope=\"function\", autouse=False)\n    def proxy_driver(self, request):\n        browser = request.node.callspec.params[\"driver\"]\n        test_name = request.param\n        print(browser)\n        print(test_name)\n        # browser = getattr(request, \"param\", None)\n        project_folder = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n        mitmdump_path = shutil.which(\"mitmdump\")\n        script_path = os.path.join(project_folder, \"Common\", \"ResponseInterception.py\")\n        print(\"Proxy fixture started\")\n    \n        if mitmdump_path is None:\n            raise FileNotFoundError(\"mitmdump executable not found in PATH. Please ensure mitmproxy is installed.\")\n        if browser == \"chrome\":\n            port = \"8082\"\n        elif browser == \"edge\":\n            port = \"8084\"\n        else:\n            port = \"8081\"\n        # port = \"8082\"\n        mitmdump_process = subprocess.Popen([mitmdump_path, \"-s\", script_path, \"--listen-port\", port,\n                                             \"--set\", f\"test_name={test_name}\"])\n        print(\"Proxy subprocess started\")\n        if browser == \"chrome\":\n            chrome_driver_path = os.path.join(project_folder, 'Resources', 'chromedriver')\n            options = webdriver.ChromeOptions()\n            options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')  # mitmproxy default proxy\n            options.add_argument('--ignore-certificate-errors')  # Bypass cert errors if needed for testing\n    \n            serv = ChromeService(chrome_driver_path)\n>           proxy_driver = webdriver.Chrome(service=serv, options=options)\n\nCommon/BaseClass.py:142: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py:50: in __init__\n    self.service.start()\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/common/service.py:98: in start\n    self._start_process(self._path)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/common/service.py:208: in _start_process\n    self.process = subprocess.Popen(\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/subprocess.py:1026: in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Popen: returncode: 255 args: ['/home/runner/work/QUBA_WEB/QUBA_WEB/Resource...>\nargs = ['/home/runner/work/QUBA_WEB/QUBA_WEB/Resources/chromedriver', '--port=32883']\nexecutable = b'/home/runner/work/QUBA_WEB/QUBA_WEB/Resources/chromedriver'\npreexec_fn = None, close_fds = True, pass_fds = (), cwd = None\nenv = environ({'SELENIUM_JAR_PATH': '/usr/share/java/selenium-server.jar', 'CONDA': '/usr/share/miniconda', 'GITHUB_WORKSPAC...bin/pytest', 'PYTEST_CURRENT_TEST': 'Tests/test_HomePage.py::TestHomePage::test_29[home_page_test_29-chrome] (setup)'})\nstartupinfo = None, creationflags = 0, shell = False, p2cread = 13\np2cwrite = 14, c2pread = -1, c2pwrite = 15, errread = -1, errwrite = 15\nrestore_signals = True, gid = None, gids = None, uid = None, umask = -1\nstart_new_session = False, process_group = -1\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       restore_signals,\n                       gid, gids, uid, umask,\n                       start_new_session, process_group):\n        \"\"\"Execute program (POSIX version)\"\"\"\n    \n        if isinstance(args, (str, bytes)):\n            args = [args]\n        elif isinstance(args, os.PathLike):\n            if shell:\n                raise TypeError('path-like args is not allowed when '\n                                'shell is true')\n            args = [args]\n        else:\n            args = list(args)\n    \n        if shell:\n            # On Android the default shell is at '/system/bin/sh'.\n            unix_shell = ('/system/bin/sh' if\n                      hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n            args = [unix_shell, \"-c\"] + args\n            if executable:\n                args[0] = executable\n    \n        if executable is None:\n            executable = args[0]\n    \n        sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n    \n        if (_USE_POSIX_SPAWN\n                and os.path.dirname(executable)\n                and preexec_fn is None\n                and not close_fds\n                and not pass_fds\n                and cwd is None\n                and (p2cread == -1 or p2cread > 2)\n                and (c2pwrite == -1 or c2pwrite > 2)\n                and (errwrite == -1 or errwrite > 2)\n                and not start_new_session\n                and process_group == -1\n                and gid is None\n                and gids is None\n                and uid is None\n                and umask < 0):\n            self._posix_spawn(args, executable, env, restore_signals,\n                              p2cread, p2cwrite,\n                              c2pread, c2pwrite,\n                              errread, errwrite)\n            return\n    \n        orig_executable = executable\n    \n        # For transferring possible exec failure from child to parent.\n        # Data format: \"exception name:hex errno:description\"\n        # Pickle is not used; it is complex and involves memory allocation.\n        errpipe_read, errpipe_write = os.pipe()\n        # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n        low_fds_to_close = []\n        while errpipe_write < 3:\n            low_fds_to_close.append(errpipe_write)\n            errpipe_write = os.dup(errpipe_write)\n        for low_fd in low_fds_to_close:\n            os.close(low_fd)\n        try:\n            try:\n                # We must avoid complex work that could involve\n                # malloc or free in the child process to avoid\n                # potential deadlocks, thus we do all this here.\n                # and pass it to fork_exec()\n    \n                if env is not None:\n                    env_list = []\n                    for k, v in env.items():\n                        k = os.fsencode(k)\n                        if b'=' in k:\n                            raise ValueError(\"illegal environment variable name\")\n                        env_list.append(k + b'=' + os.fsencode(v))\n                else:\n                    env_list = None  # Use execv instead of execve.\n                executable = os.fsencode(executable)\n                if os.path.dirname(executable):\n                    executable_list = (executable,)\n                else:\n                    # This matches the behavior of os._execvpe().\n                    executable_list = tuple(\n                        os.path.join(os.fsencode(dir), executable)\n                        for dir in os.get_exec_path(env))\n                fds_to_keep = set(pass_fds)\n                fds_to_keep.add(errpipe_write)\n                self.pid = _fork_exec(\n                        args, executable_list,\n                        close_fds, tuple(sorted(map(int, fds_to_keep))),\n                        cwd, env_list,\n                        p2cread, p2cwrite, c2pread, c2pwrite,\n                        errread, errwrite,\n                        errpipe_read, errpipe_write,\n                        restore_signals, start_new_session,\n                        process_group, gid, gids, uid, umask,\n                        preexec_fn, _USE_VFORK)\n                self._child_created = True\n            finally:\n                # be sure the FD is closed no matter what\n                os.close(errpipe_write)\n    \n            self._close_pipe_fds(p2cread, p2cwrite,\n                                 c2pread, c2pwrite,\n                                 errread, errwrite)\n    \n            # Wait for exec to fail or succeed; possibly raising an\n            # exception (limited in size)\n            errpipe_data = bytearray()\n            while True:\n                part = os.read(errpipe_read, 50000)\n                errpipe_data += part\n                if not part or len(errpipe_data) > 50000:\n                    break\n        finally:\n            # be sure the FD is closed no matter what\n            os.close(errpipe_read)\n    \n        if errpipe_data:\n            try:\n                pid, sts = os.waitpid(self.pid, 0)\n                if pid == self.pid:\n                    self._handle_exitstatus(sts)\n                else:\n                    self.returncode = sys.maxsize\n            except ChildProcessError:\n                pass\n    \n            try:\n                exception_name, hex_errno, err_msg = (\n                        errpipe_data.split(b':', 2))\n                # The encoding here should match the encoding\n                # written in by the subprocess implementations\n                # like _posixsubprocess\n                err_msg = err_msg.decode()\n            except ValueError:\n                exception_name = b'SubprocessError'\n                hex_errno = b'0'\n                err_msg = 'Bad exception data from child: {!r}'.format(\n                              bytes(errpipe_data))\n            child_exception_type = getattr(\n                    builtins, exception_name.decode('ascii'),\n                    SubprocessError)\n            if issubclass(child_exception_type, OSError) and hex_errno:\n                errno_num = int(hex_errno, 16)\n                if err_msg == \"noexec:chdir\":\n                    err_msg = \"\"\n                    # The error must be from chdir(cwd).\n                    err_filename = cwd\n                elif err_msg == \"noexec\":\n                    err_msg = \"\"\n                    err_filename = None\n                else:\n                    err_filename = orig_executable\n                if errno_num != 0:\n                    err_msg = os.strerror(errno_num)\n                if err_filename is not None:\n>                   raise child_exception_type(errno_num, err_msg, err_filename)\nE                   OSError: [Errno 8] Exec format error: '/home/runner/work/QUBA_WEB/QUBA_WEB/Resources/chromedriver'\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/subprocess.py:1955: OSError","steps":[],"attachments":[{"uid":"8a216547ab224ced","name":"stdout","source":"8a216547ab224ced.txt","type":"text/plain","size":72}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1731480637824,"stop":1731480637911,"duration":87},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_xunit_setup_class_fixture_TestHomePage::0","time":{"start":1731480637911,"stop":1731480637911,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"Home page"},{"name":"tag","value":"flaky(reruns=3, reruns_delay=1)"},{"name":"parentSuite","value":"Tests"},{"name":"suite","value":"test_HomePage"},{"name":"subSuite","value":"TestHomePage"},{"name":"host","value":"fv-az849-150"},{"name":"thread","value":"1815-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_HomePage"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"'chrome'"},{"name":"proxy_driver","value":"'home_page_test_29'"}],"links":[{"name":"C58610","url":"https://hedgehoglabqa.testrail.io/index.php?/cases/view/58610","type":"tms"},{"name":"Epic QP-356","url":"https://hedgehog-lab.atlassian.net/browse/QP-356","type":"issue"},{"name":"Story QP-269","url":"https://hedgehog-lab.atlassian.net/browse/QP-269","type":"issue"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["flaky(reruns=3, reruns_delay=1)"]},"source":"8cdbe0f6cb2a3178.json","parameterValues":["'chrome'","'home_page_test_29'"]}