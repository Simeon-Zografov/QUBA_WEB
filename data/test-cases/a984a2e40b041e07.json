{"uid":"a984a2e40b041e07","name":"Unsuccessfully login with email: simeon.hhl.qa@gmail.co and password: Test#1234","fullName":"Tests.test_Login.TestLogin#test_3","historyId":"e9344092173b66b80e87589f113edd53","time":{"start":1733024830048,"stop":1733024834104,"duration":4056},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchFrameException: Message:","statusTrace":"self = <Tests.test_Login.TestLogin object at 0x10806cd90>\ndriver = <selenium.webdriver.safari.webdriver.WebDriver (session=\"2B75672D-8570-44B9-A3D0-FD0274E8C41D\")>\nemail = 'simeon.hhl.qa@gmail.co', password = 'Test#1234'\nerror = 'There was a problem logging you in. Please try again.'\ntest_case = 'C58784'\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('Login')\n    @allure.title(\"Unsuccessfully login with email: {email} and password: {password}\")\n    @allure.issue(\"QP-382\", \"Story QP-382\")\n    @allure.issue(\"QP-356\", \"Epic QP-356\")\n    @allure.testcase(\"58783\", \"C58783\")\n    @allure.testcase(\"58784\", \"C58784\")\n    @allure.testcase(\"58785\", \"C58785\")\n    @allure.testcase(\"58785\", \"C58786\")\n    @pytest.mark.dependency(depends=[\"test_1\"])\n    @pytest.mark.parametrize('email,password,error,test_case', [\n        (EMAIL[:-1], PASSWORD, \"There was a problem logging you in. Please try again.\", \"C58784\"),\n        (EMAIL, PASSWORD[:-1], \"There was a problem logging you in. Please try again.\", \"C58785\"),\n        (EMAIL.replace(\"@\", \"\"), PASSWORD, \"Please enter a valid email\", \"C58783\"),\n        (\"\", PASSWORD, \"Please enter your email\", \"C58784\"),\n        (EMAIL, \"\", \"Please enter your password\", \"C58785\")\n    ])\n    def test_3(self, driver, email, password, error, test_case):\n        current_browser = self.current_browser\n        login_obj = Login(driver)\n        driver.refresh()\n        login_obj.set_email_field(email, current_browser)\n        login_obj.set_password_field(password, current_browser)\n        with check, allure.step(f\"{test_case}: Check for error\"):\n            if \"Please enter\" in error:\n                assert login_obj.is_filed_error_message_visible()\n            else:\n                login_obj.click_login_button()\n>               assert login_obj.is_credentials_error_message_visible()\n\nTests/test_Login.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages/LoginPage.py:61: in is_credentials_error_message_visible\n    message = wait.until(EC.visibility_of_element_located(self.credentials_error_message))\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:96: in until\n    value = method(self._driver)\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x108146a90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such frame\",\"message\":\"\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchFrameException: Message:\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchFrameException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1733024544005,"stop":1733024544080,"duration":75},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1733024821318,"stop":1733024822323,"duration":1005},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchFrameException: Message:","statusTrace":"self = <Tests.test_Login.TestLogin object at 0x10806cd90>\ndriver = <selenium.webdriver.safari.webdriver.WebDriver (session=\"2B75672D-8570-44B9-A3D0-FD0274E8C41D\")>\nemail = 'simeon.hhl.qa@gmail.co', password = 'Test#1234'\nerror = 'There was a problem logging you in. Please try again.'\ntest_case = 'C58784'\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('Login')\n    @allure.title(\"Unsuccessfully login with email: {email} and password: {password}\")\n    @allure.issue(\"QP-382\", \"Story QP-382\")\n    @allure.issue(\"QP-356\", \"Epic QP-356\")\n    @allure.testcase(\"58783\", \"C58783\")\n    @allure.testcase(\"58784\", \"C58784\")\n    @allure.testcase(\"58785\", \"C58785\")\n    @allure.testcase(\"58785\", \"C58786\")\n    @pytest.mark.dependency(depends=[\"test_1\"])\n    @pytest.mark.parametrize('email,password,error,test_case', [\n        (EMAIL[:-1], PASSWORD, \"There was a problem logging you in. Please try again.\", \"C58784\"),\n        (EMAIL, PASSWORD[:-1], \"There was a problem logging you in. Please try again.\", \"C58785\"),\n        (EMAIL.replace(\"@\", \"\"), PASSWORD, \"Please enter a valid email\", \"C58783\"),\n        (\"\", PASSWORD, \"Please enter your email\", \"C58784\"),\n        (EMAIL, \"\", \"Please enter your password\", \"C58785\")\n    ])\n    def test_3(self, driver, email, password, error, test_case):\n        current_browser = self.current_browser\n        login_obj = Login(driver)\n        driver.refresh()\n        login_obj.set_email_field(email, current_browser)\n        login_obj.set_password_field(password, current_browser)\n        with check, allure.step(f\"{test_case}: Check for error\"):\n            if \"Please enter\" in error:\n                assert login_obj.is_filed_error_message_visible()\n            else:\n                login_obj.click_login_button()\n>               assert login_obj.is_credentials_error_message_visible()\n\nTests/test_Login.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages/LoginPage.py:61: in is_credentials_error_message_visible\n    message = wait.until(EC.visibility_of_element_located(self.credentials_error_message))\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:96: in until\n    value = method(self._driver)\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x108146a90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such frame\",\"message\":\"\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchFrameException: Message:\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchFrameException","steps":[{"name":"C58784: Check for error","time":{"start":1733024832416,"stop":1733024834093,"duration":1677},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchFrameException: Message: \n\n","statusTrace":"  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Tests/test_Login.py\", line 83, in test_3\n    assert login_obj.is_credentials_error_message_visible()\n  File \"/Users/runner/work/QUBA_WEB/QUBA_WEB/Pages/LoginPage.py\", line 61, in is_credentials_error_message_visible\n    message = wait.until(EC.visibility_of_element_located(self.credentials_error_message))\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/support/wait.py\", line 96, in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py\", line 156, in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 741, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1733024862952,"stop":1733024863002,"duration":50},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"Login"},{"name":"tag","value":"dependency(depends=['test_1'])"},{"name":"tag","value":"flaky(reruns=3, reruns_delay=1)"},{"name":"parentSuite","value":"Tests"},{"name":"suite","value":"test_Login"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"Mac-1733024202229.local"},{"name":"thread","value":"2073-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_Login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"'safari'"},{"name":"email","value":"'simeon.hhl.qa@gmail.co'"},{"name":"error","value":"'There was a problem logging you in. Please try again.'"},{"name":"password","value":"'Test#1234'"},{"name":"test_case","value":"'C58784'"}],"links":[{"name":"C58786","url":"https://hedgehoglabqa.testrail.io/index.php?/cases/view/58785","type":"tms"},{"name":"C58785","url":"https://hedgehoglabqa.testrail.io/index.php?/cases/view/58785","type":"tms"},{"name":"C58784","url":"https://hedgehoglabqa.testrail.io/index.php?/cases/view/58784","type":"tms"},{"name":"C58783","url":"https://hedgehoglabqa.testrail.io/index.php?/cases/view/58783","type":"tms"},{"name":"Epic QP-356","url":"https://hedgehog-lab.atlassian.net/browse/QP-356","type":"issue"},{"name":"Story QP-382","url":"https://hedgehog-lab.atlassian.net/browse/QP-382","type":"issue"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["flaky(reruns=3, reruns_delay=1)","dependency(depends=['test_1'])"]},"source":"a984a2e40b041e07.json","parameterValues":["'safari'","'simeon.hhl.qa@gmail.co'","'There was a problem logging you in. Please try again.'","'Test#1234'","'C58784'"]}