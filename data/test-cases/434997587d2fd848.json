{"uid":"434997587d2fd848","name":"Image gallery with only one image","fullName":"Tests.test_AboutPage.TestAboutPage#test_9","historyId":"a62706d125119b2924f65a46bf1039dd","time":{"start":1732091653653,"stop":1732091653866,"duration":213},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_RESET\n  (Session info: MicrosoftEdge=130.0.2849.80)\nStacktrace:\n#0 0x562f11af15be <unknown>\n#1 0x562f115b89f6 <unknown>\n#2 0x562f115b662a <unknown>\n#3 0x562f115a2a10 <unknown>\n#4 0x562f115a4660 <unknown>\n#5 0x562f115a2dc4 <unknown>\n#6 0x562f115a262a <unknown>\n#7 0x562f115a24b2 <unknown>\n#8 0x562f115a099e <unknown>\n#9 0x562f115a0ca7 <unknown>\n#10 0x562f115bb5d3 <unknown>\n#11 0x562f1164669e <unknown>\n#12 0x562f11627f52 <unknown>\n#13 0x562f11645efe <unknown>\n#14 0x562f11627cf3 <unknown>\n#15 0x562f115f82de <unknown>\n#16 0x562f115f8fbe <unknown>\n#17 0x562f11ac6521 <unknown>\n#18 0x562f11ac9791 <unknown>\n#19 0x562f11ac920b <unknown>\n#20 0x562f11ac9bc5 <unknown>\n#21 0x562f11ab7ef2 <unknown>\n#22 0x562f11ac9f4d <unknown>\n#23 0x562f11aa18c5 <unknown>\n#24 0x562f11ae1d18 <unknown>\n#25 0x562f11ae1f2f <unknown>\n#26 0x562f11af01bc <unknown>\n#27 0x7ff1c7494ac3 <unknown>","statusTrace":"self = <Tests.test_AboutPage.TestAboutPage object at 0x7ff8ebf7b190>\nproxy_driver = <selenium.webdriver.edge.webdriver.WebDriver (session=\"89f80624834268dcf0ebd952c32f50df\")>\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('About page')\n    @allure.title(\"Image gallery with only one image\")\n    @allure.issue(\"QP-266\", \"Story QP-266\")\n    @allure.issue(\"QP-356\", \"Epic QP-356\")\n    @allure.testcase(\"58522\", \"C58522\")\n    @pytest.mark.parametrize(\"proxy_driver\", [\"about_page_test_9\"], indirect=True)\n    def test_9(self, proxy_driver):\n>       proxy_driver.get(BaseClass.url)\n\nTests/test_AboutPage.py:154: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff8eac174d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_RESET\\\\n  (S...\\\\n#25 0x562f11ae1f2f \\\\u003Cunknown>\\\\n#26 0x562f11af01bc \\\\u003Cunknown>\\\\n#27 0x7ff1c7494ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_RESET\nE         (Session info: MicrosoftEdge=130.0.2849.80)\nE       Stacktrace:\nE       #0 0x562f11af15be <unknown>\nE       #1 0x562f115b89f6 <unknown>\nE       #2 0x562f115b662a <unknown>\nE       #3 0x562f115a2a10 <unknown>\nE       #4 0x562f115a4660 <unknown>\nE       #5 0x562f115a2dc4 <unknown>\nE       #6 0x562f115a262a <unknown>\nE       #7 0x562f115a24b2 <unknown>\nE       #8 0x562f115a099e <unknown>\nE       #9 0x562f115a0ca7 <unknown>\nE       #10 0x562f115bb5d3 <unknown>\nE       #11 0x562f1164669e <unknown>\nE       #12 0x562f11627f52 <unknown>\nE       #13 0x562f11645efe <unknown>\nE       #14 0x562f11627cf3 <unknown>\nE       #15 0x562f115f82de <unknown>\nE       #16 0x562f115f8fbe <unknown>\nE       #17 0x562f11ac6521 <unknown>\nE       #18 0x562f11ac9791 <unknown>\nE       #19 0x562f11ac920b <unknown>\nE       #20 0x562f11ac9bc5 <unknown>\nE       #21 0x562f11ab7ef2 <unknown>\nE       #22 0x562f11ac9f4d <unknown>\nE       #23 0x562f11aa18c5 <unknown>\nE       #24 0x562f11ae1d18 <unknown>\nE       #25 0x562f11ae1f2f <unknown>\nE       #26 0x562f11af01bc <unknown>\nE       #27 0x7ff1c7494ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1732091284763,"stop":1732091284828,"duration":65},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1732091284829,"stop":1732091636716,"duration":351887},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: MicrosoftEdge=130.0.2849.80)\nStacktrace:\n#0 0x56154098b5be <unknown>\n#1 0x5615404529f6 <unknown>\n#2 0x56154043c6e8 <unknown>\n#3 0x56154043c4b2 <unknown>\n#4 0x56154043a99e <unknown>\n#5 0x56154043ae14 <unknown>\n#6 0x56154044f097 <unknown>\n#7 0x56154045e4ff <unknown>\n#8 0x5615404632fb <unknown>\n#9 0x56154043b405 <unknown>\n#10 0x56154045e190 <unknown>\n#11 0x5615404dfd42 <unknown>\n#12 0x5615404c1cf3 <unknown>\n#13 0x5615404922de <unknown>\n#14 0x561540492fbe <unknown>\n#15 0x561540960521 <unknown>\n#16 0x561540963791 <unknown>\n#17 0x56154096320b <unknown>\n#18 0x561540963bc5 <unknown>\n#19 0x561540951ef2 <unknown>\n#20 0x561540963f4d <unknown>\n#21 0x56154093b8c5 <unknown>\n#22 0x56154097bd18 <unknown>\n#23 0x56154097bf2f <unknown>\n#24 0x56154098a1bc <unknown>\n#25 0x7fa1c6894ac3 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 166, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 102, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 1132, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 906, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/home/runner/work/QUBA_WEB/QUBA_WEB/Common/BaseClass.py\", line 109, in driver\n    driver.maximize_window()\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 499, in maximize_window\n    self.execute(command, None)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"driver","time":{"start":1732091637772,"stop":1732091639096,"duration":1324},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1732091648127,"stop":1732091648127,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"proxy_driver","time":{"start":1732091648127,"stop":1732091653652,"duration":5525},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_RESET\n  (Session info: MicrosoftEdge=130.0.2849.80)\nStacktrace:\n#0 0x562f11af15be <unknown>\n#1 0x562f115b89f6 <unknown>\n#2 0x562f115b662a <unknown>\n#3 0x562f115a2a10 <unknown>\n#4 0x562f115a4660 <unknown>\n#5 0x562f115a2dc4 <unknown>\n#6 0x562f115a262a <unknown>\n#7 0x562f115a24b2 <unknown>\n#8 0x562f115a099e <unknown>\n#9 0x562f115a0ca7 <unknown>\n#10 0x562f115bb5d3 <unknown>\n#11 0x562f1164669e <unknown>\n#12 0x562f11627f52 <unknown>\n#13 0x562f11645efe <unknown>\n#14 0x562f11627cf3 <unknown>\n#15 0x562f115f82de <unknown>\n#16 0x562f115f8fbe <unknown>\n#17 0x562f11ac6521 <unknown>\n#18 0x562f11ac9791 <unknown>\n#19 0x562f11ac920b <unknown>\n#20 0x562f11ac9bc5 <unknown>\n#21 0x562f11ab7ef2 <unknown>\n#22 0x562f11ac9f4d <unknown>\n#23 0x562f11aa18c5 <unknown>\n#24 0x562f11ae1d18 <unknown>\n#25 0x562f11ae1f2f <unknown>\n#26 0x562f11af01bc <unknown>\n#27 0x7ff1c7494ac3 <unknown>","statusTrace":"self = <Tests.test_AboutPage.TestAboutPage object at 0x7ff8ebf7b190>\nproxy_driver = <selenium.webdriver.edge.webdriver.WebDriver (session=\"89f80624834268dcf0ebd952c32f50df\")>\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('About page')\n    @allure.title(\"Image gallery with only one image\")\n    @allure.issue(\"QP-266\", \"Story QP-266\")\n    @allure.issue(\"QP-356\", \"Epic QP-356\")\n    @allure.testcase(\"58522\", \"C58522\")\n    @pytest.mark.parametrize(\"proxy_driver\", [\"about_page_test_9\"], indirect=True)\n    def test_9(self, proxy_driver):\n>       proxy_driver.get(BaseClass.url)\n\nTests/test_AboutPage.py:154: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff8eac174d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_RESET\\\\n  (S...\\\\n#25 0x562f11ae1f2f \\\\u003Cunknown>\\\\n#26 0x562f11af01bc \\\\u003Cunknown>\\\\n#27 0x7ff1c7494ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_RESET\nE         (Session info: MicrosoftEdge=130.0.2849.80)\nE       Stacktrace:\nE       #0 0x562f11af15be <unknown>\nE       #1 0x562f115b89f6 <unknown>\nE       #2 0x562f115b662a <unknown>\nE       #3 0x562f115a2a10 <unknown>\nE       #4 0x562f115a4660 <unknown>\nE       #5 0x562f115a2dc4 <unknown>\nE       #6 0x562f115a262a <unknown>\nE       #7 0x562f115a24b2 <unknown>\nE       #8 0x562f115a099e <unknown>\nE       #9 0x562f115a0ca7 <unknown>\nE       #10 0x562f115bb5d3 <unknown>\nE       #11 0x562f1164669e <unknown>\nE       #12 0x562f11627f52 <unknown>\nE       #13 0x562f11645efe <unknown>\nE       #14 0x562f11627cf3 <unknown>\nE       #15 0x562f115f82de <unknown>\nE       #16 0x562f115f8fbe <unknown>\nE       #17 0x562f11ac6521 <unknown>\nE       #18 0x562f11ac9791 <unknown>\nE       #19 0x562f11ac920b <unknown>\nE       #20 0x562f11ac9bc5 <unknown>\nE       #21 0x562f11ab7ef2 <unknown>\nE       #22 0x562f11ac9f4d <unknown>\nE       #23 0x562f11aa18c5 <unknown>\nE       #24 0x562f11ae1d18 <unknown>\nE       #25 0x562f11ae1f2f <unknown>\nE       #26 0x562f11af01bc <unknown>\nE       #27 0x7ff1c7494ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","steps":[],"attachments":[{"uid":"8d6029ae2e412805","name":"stdout","source":"8d6029ae2e412805.txt","type":"text/plain","size":93}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"proxy_driver::0","time":{"start":1732091653891,"stop":1732091664067,"duration":10176},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver::0","time":{"start":1732091878249,"stop":1732091878350,"duration":101},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"About page"},{"name":"severity","value":"normal"},{"name":"tag","value":"flaky(reruns=3, reruns_delay=1)"},{"name":"parentSuite","value":"Tests"},{"name":"suite","value":"test_AboutPage"},{"name":"subSuite","value":"TestAboutPage"},{"name":"host","value":"fv-az1393-935"},{"name":"thread","value":"1880-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_AboutPage"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"'edge'"},{"name":"proxy_driver","value":"'about_page_test_9'"}],"links":[{"name":"C58522","url":"https://hedgehoglabqa.testrail.io/index.php?/cases/view/58522","type":"tms"},{"name":"Epic QP-356","url":"https://hedgehog-lab.atlassian.net/browse/QP-356","type":"issue"},{"name":"Story QP-266","url":"https://hedgehog-lab.atlassian.net/browse/QP-266","type":"issue"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["flaky(reruns=3, reruns_delay=1)"]},"source":"434997587d2fd848.json","parameterValues":["'edge'","'about_page_test_9'"]}