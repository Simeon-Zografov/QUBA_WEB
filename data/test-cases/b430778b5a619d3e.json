{"uid":"b430778b5a619d3e","name":"Event carousel cards without events","fullName":"Tests.test_HomePage.TestHomePage#test_29","historyId":"9ac7a6aeb33d74cd3a8637517586188a","time":{"start":1731480654825,"stop":1731480654825,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Microsoft Edge failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from msedge location /usr/bin/microsoft-edge is no longer running, so msedgedriver is assuming that msedge has crashed.)\nStacktrace:\n#0 0x55aa0d00d5be <unknown>\n#1 0x55aa0cad49f6 <unknown>\n#2 0x55aa0cb0cfde <unknown>\n#3 0x55aa0cb065d9 <unknown>\n#4 0x55aa0cb510c2 <unknown>\n#5 0x55aa0cb5030f <unknown>\n#6 0x55aa0cb43cf3 <unknown>\n#7 0x55aa0cb142de <unknown>\n#8 0x55aa0cb14fbe <unknown>\n#9 0x55aa0cfe2521 <unknown>\n#10 0x55aa0cfe5791 <unknown>\n#11 0x55aa0cfe520b <unknown>\n#12 0x55aa0cfe5bc5 <unknown>\n#13 0x55aa0cfd3ef2 <unknown>\n#14 0x55aa0cfe5f4d <unknown>\n#15 0x55aa0cfbd8c5 <unknown>\n#16 0x55aa0cffdd18 <unknown>\n#17 0x55aa0cffdf2f <unknown>\n#18 0x55aa0d00c1bc <unknown>\n#19 0x7fc73d894ac3 <unknown>","statusTrace":"self = <Tests.test_HomePage.TestHomePage object at 0x7f4e171e0450>\nrequest = <SubRequest 'proxy_driver' for <Function test_29[home_page_test_29-edge]>>\n\n    @pytest.fixture(scope=\"function\", autouse=False)\n    def proxy_driver(self, request):\n        browser = request.node.callspec.params[\"driver\"]\n        test_name = request.param\n        print(browser)\n        print(test_name)\n        # browser = getattr(request, \"param\", None)\n        project_folder = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n        mitmdump_path = shutil.which(\"mitmdump\")\n        script_path = os.path.join(project_folder, \"Common\", \"ResponseInterception.py\")\n        print(\"Proxy fixture started\")\n    \n        if mitmdump_path is None:\n            raise FileNotFoundError(\"mitmdump executable not found in PATH. Please ensure mitmproxy is installed.\")\n        if browser == \"chrome\":\n            port = \"8082\"\n        elif browser == \"edge\":\n            port = \"8084\"\n        else:\n            port = \"8081\"\n        # port = \"8082\"\n        mitmdump_process = subprocess.Popen([mitmdump_path, \"-s\", script_path, \"--listen-port\", port,\n                                             \"--set\", f\"test_name={test_name}\"])\n        print(\"Proxy subprocess started\")\n        if browser == \"chrome\":\n            chrome_driver_path = os.path.join(project_folder, 'Resources', 'chromedriver')\n            options = webdriver.ChromeOptions()\n            options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')  # mitmproxy default proxy\n            options.add_argument('--ignore-certificate-errors')  # Bypass cert errors if needed for testing\n    \n            serv = ChromeService(chrome_driver_path)\n            proxy_driver = webdriver.Chrome(service=serv, options=options)\n        else:\n            options = webdriver.EdgeOptions()\n            options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')  # mitmproxy default proxy\n            options.add_argument('--ignore-certificate-errors')  # Bypass cert errors if needed for testing\n    \n>           proxy_driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)\n\nCommon/BaseClass.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/edge/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py:61: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:208: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4e16d53690>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: Microsoft Edge faile...\\\\n#17 0x55aa0cffdf2f \\\\u003Cunknown>\\\\n#18 0x55aa0d00c1bc \\\\u003Cunknown>\\\\n#19 0x7fc73d894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Microsoft Edge failed to start: exited normally.\nE         (session not created: DevToolsActivePort file doesn't exist)\nE         (The process started from msedge location /usr/bin/microsoft-edge is no longer running, so msedgedriver is assuming that msedge has crashed.)\nE       Stacktrace:\nE       #0 0x55aa0d00d5be <unknown>\nE       #1 0x55aa0cad49f6 <unknown>\nE       #2 0x55aa0cb0cfde <unknown>\nE       #3 0x55aa0cb065d9 <unknown>\nE       #4 0x55aa0cb510c2 <unknown>\nE       #5 0x55aa0cb5030f <unknown>\nE       #6 0x55aa0cb43cf3 <unknown>\nE       #7 0x55aa0cb142de <unknown>\nE       #8 0x55aa0cb14fbe <unknown>\nE       #9 0x55aa0cfe2521 <unknown>\nE       #10 0x55aa0cfe5791 <unknown>\nE       #11 0x55aa0cfe520b <unknown>\nE       #12 0x55aa0cfe5bc5 <unknown>\nE       #13 0x55aa0cfd3ef2 <unknown>\nE       #14 0x55aa0cfe5f4d <unknown>\nE       #15 0x55aa0cfbd8c5 <unknown>\nE       #16 0x55aa0cffdd18 <unknown>\nE       #17 0x55aa0cffdf2f <unknown>\nE       #18 0x55aa0d00c1bc <unknown>\nE       #19 0x7fc73d894ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1731480596340,"stop":1731480596408,"duration":68},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_xunit_setup_class_fixture_TestHomePage","time":{"start":1731480596408,"stop":1731480601309,"duration":4901},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1731480601310,"stop":1731480626732,"duration":25422},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"proxy_driver","time":{"start":1731480654825,"stop":1731480655120,"duration":295},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Microsoft Edge failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from msedge location /usr/bin/microsoft-edge is no longer running, so msedgedriver is assuming that msedge has crashed.)\nStacktrace:\n#0 0x55aa0d00d5be <unknown>\n#1 0x55aa0cad49f6 <unknown>\n#2 0x55aa0cb0cfde <unknown>\n#3 0x55aa0cb065d9 <unknown>\n#4 0x55aa0cb510c2 <unknown>\n#5 0x55aa0cb5030f <unknown>\n#6 0x55aa0cb43cf3 <unknown>\n#7 0x55aa0cb142de <unknown>\n#8 0x55aa0cb14fbe <unknown>\n#9 0x55aa0cfe2521 <unknown>\n#10 0x55aa0cfe5791 <unknown>\n#11 0x55aa0cfe520b <unknown>\n#12 0x55aa0cfe5bc5 <unknown>\n#13 0x55aa0cfd3ef2 <unknown>\n#14 0x55aa0cfe5f4d <unknown>\n#15 0x55aa0cfbd8c5 <unknown>\n#16 0x55aa0cffdd18 <unknown>\n#17 0x55aa0cffdf2f <unknown>\n#18 0x55aa0d00c1bc <unknown>\n#19 0x7fc73d894ac3 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 166, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 102, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 1132, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 906, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/home/runner/work/QUBA_WEB/QUBA_WEB/Common/BaseClass.py\", line 148, in proxy_driver\n    proxy_driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/edge/webdriver.py\", line 45, in __init__\n    super().__init__(\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py\", line 61, in __init__\n    super().__init__(command_executor=executor, options=options)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 208, in __init__\n    self.start_session(capabilities)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 292, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"setup","time":{"start":1731480654825,"stop":1731480654825,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Microsoft Edge failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from msedge location /usr/bin/microsoft-edge is no longer running, so msedgedriver is assuming that msedge has crashed.)\nStacktrace:\n#0 0x55aa0d00d5be <unknown>\n#1 0x55aa0cad49f6 <unknown>\n#2 0x55aa0cb0cfde <unknown>\n#3 0x55aa0cb065d9 <unknown>\n#4 0x55aa0cb510c2 <unknown>\n#5 0x55aa0cb5030f <unknown>\n#6 0x55aa0cb43cf3 <unknown>\n#7 0x55aa0cb142de <unknown>\n#8 0x55aa0cb14fbe <unknown>\n#9 0x55aa0cfe2521 <unknown>\n#10 0x55aa0cfe5791 <unknown>\n#11 0x55aa0cfe520b <unknown>\n#12 0x55aa0cfe5bc5 <unknown>\n#13 0x55aa0cfd3ef2 <unknown>\n#14 0x55aa0cfe5f4d <unknown>\n#15 0x55aa0cfbd8c5 <unknown>\n#16 0x55aa0cffdd18 <unknown>\n#17 0x55aa0cffdf2f <unknown>\n#18 0x55aa0d00c1bc <unknown>\n#19 0x7fc73d894ac3 <unknown>","statusTrace":"self = <Tests.test_HomePage.TestHomePage object at 0x7f4e171e0450>\nrequest = <SubRequest 'proxy_driver' for <Function test_29[home_page_test_29-edge]>>\n\n    @pytest.fixture(scope=\"function\", autouse=False)\n    def proxy_driver(self, request):\n        browser = request.node.callspec.params[\"driver\"]\n        test_name = request.param\n        print(browser)\n        print(test_name)\n        # browser = getattr(request, \"param\", None)\n        project_folder = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n        mitmdump_path = shutil.which(\"mitmdump\")\n        script_path = os.path.join(project_folder, \"Common\", \"ResponseInterception.py\")\n        print(\"Proxy fixture started\")\n    \n        if mitmdump_path is None:\n            raise FileNotFoundError(\"mitmdump executable not found in PATH. Please ensure mitmproxy is installed.\")\n        if browser == \"chrome\":\n            port = \"8082\"\n        elif browser == \"edge\":\n            port = \"8084\"\n        else:\n            port = \"8081\"\n        # port = \"8082\"\n        mitmdump_process = subprocess.Popen([mitmdump_path, \"-s\", script_path, \"--listen-port\", port,\n                                             \"--set\", f\"test_name={test_name}\"])\n        print(\"Proxy subprocess started\")\n        if browser == \"chrome\":\n            chrome_driver_path = os.path.join(project_folder, 'Resources', 'chromedriver')\n            options = webdriver.ChromeOptions()\n            options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')  # mitmproxy default proxy\n            options.add_argument('--ignore-certificate-errors')  # Bypass cert errors if needed for testing\n    \n            serv = ChromeService(chrome_driver_path)\n            proxy_driver = webdriver.Chrome(service=serv, options=options)\n        else:\n            options = webdriver.EdgeOptions()\n            options.add_argument(f'--proxy-server=http://127.0.0.1:{port}')  # mitmproxy default proxy\n            options.add_argument('--ignore-certificate-errors')  # Bypass cert errors if needed for testing\n    \n>           proxy_driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)\n\nCommon/BaseClass.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/edge/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py:61: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:208: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4e16d53690>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: Microsoft Edge faile...\\\\n#17 0x55aa0cffdf2f \\\\u003Cunknown>\\\\n#18 0x55aa0d00c1bc \\\\u003Cunknown>\\\\n#19 0x7fc73d894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Microsoft Edge failed to start: exited normally.\nE         (session not created: DevToolsActivePort file doesn't exist)\nE         (The process started from msedge location /usr/bin/microsoft-edge is no longer running, so msedgedriver is assuming that msedge has crashed.)\nE       Stacktrace:\nE       #0 0x55aa0d00d5be <unknown>\nE       #1 0x55aa0cad49f6 <unknown>\nE       #2 0x55aa0cb0cfde <unknown>\nE       #3 0x55aa0cb065d9 <unknown>\nE       #4 0x55aa0cb510c2 <unknown>\nE       #5 0x55aa0cb5030f <unknown>\nE       #6 0x55aa0cb43cf3 <unknown>\nE       #7 0x55aa0cb142de <unknown>\nE       #8 0x55aa0cb14fbe <unknown>\nE       #9 0x55aa0cfe2521 <unknown>\nE       #10 0x55aa0cfe5791 <unknown>\nE       #11 0x55aa0cfe520b <unknown>\nE       #12 0x55aa0cfe5bc5 <unknown>\nE       #13 0x55aa0cfd3ef2 <unknown>\nE       #14 0x55aa0cfe5f4d <unknown>\nE       #15 0x55aa0cfbd8c5 <unknown>\nE       #16 0x55aa0cffdd18 <unknown>\nE       #17 0x55aa0cffdf2f <unknown>\nE       #18 0x55aa0d00c1bc <unknown>\nE       #19 0x7fc73d894ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException","steps":[],"attachments":[{"uid":"9e21c8f556ea91c4","name":"stdout","source":"9e21c8f556ea91c4.txt","type":"text/plain","size":866},{"uid":"83e0537700ad3f4","name":"stderr","source":"83e0537700ad3f4.txt","type":"text/plain","size":80}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1731480658679,"stop":1731480658753,"duration":74},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_xunit_setup_class_fixture_TestHomePage::0","time":{"start":1731480658753,"stop":1731480658753,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"Home page"},{"name":"tag","value":"flaky(reruns=3, reruns_delay=1)"},{"name":"parentSuite","value":"Tests"},{"name":"suite","value":"test_HomePage"},{"name":"subSuite","value":"TestHomePage"},{"name":"host","value":"fv-az714-931"},{"name":"thread","value":"1749-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_HomePage"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"'edge'"},{"name":"proxy_driver","value":"'home_page_test_29'"}],"links":[{"name":"C58610","url":"https://hedgehoglabqa.testrail.io/index.php?/cases/view/58610","type":"tms"},{"name":"Epic QP-356","url":"https://hedgehog-lab.atlassian.net/browse/QP-356","type":"issue"},{"name":"Story QP-269","url":"https://hedgehog-lab.atlassian.net/browse/QP-269","type":"issue"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["flaky(reruns=3, reruns_delay=1)"]},"source":"b430778b5a619d3e.json","parameterValues":["'edge'","'home_page_test_29'"]}