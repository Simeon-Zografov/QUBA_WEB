name: Run Selenium Tests and publish report

on:
  schedule:
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      chrome:
        description: 'Include Chrome'
        required: false
        default: true
        type: boolean
      firefox:
        description: 'Include Firefox'
        required: false
        default: false
        type: boolean
      safari:
        description: 'Include Safari'
        required: false
        default: false
        type: boolean
      edge:
        description: 'Include Edge'
        required: false
        default: false
        type: boolean

      test_options:
        description: 'Select test options'
        required: true
        default: 'All'
        type: choice
        options:
          - 'All'
          - 'Home Page'
          - 'About Page'
          - 'Login'
          - 'Sites Page'
          - 'Contact Page'
          - 'Sponsors Page'
          - 'Events page'

jobs:
  chrome-test:
    name: Run Chrome tests
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || github.event.inputs.chrome == 'true' }}
    steps:
      
      - name: Set browser variable
        run: echo "BROWSERS=chrome" >> "$GITHUB_ENV"
        
      - name: Checkout test repository
        uses: actions/checkout@v4
        with:
          repository: Simeon-Zografov/QUBA_WEB

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
        working-directory: .

      - name: Set timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Europe/London"

      - name: Run Selenium tests
        continue-on-error: true
        env:
          URL: ${{ vars.URL }}
          PASSWORD: ${{ secrets.PASSWORD }}
          BROWSERS: ${{ env.BROWSERS }}
          EMAIL: ${{ vars.EMAIL }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          APIURL: ${{ vars.APIURL }}
          KCURL: ${{ vars.KCURL }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          CMS_URL: ${{ vars.CMS_URL }}
          CMS_EMAIL: ${{ secrets.CMS_EMAIL }}
          CMS_PASSWORD: ${{ secrets.CMS_PASSWORD }}

        run: |
          mkdir -p allure-results
          if [ "${{ github.event_name }}" == 'schedule' ] || [ "${{ github.event.inputs.test_options }}" == 'All' ]; then
            pytest
          else
            if [ "${{ github.event.inputs.test_options }}" == 'Home Page' ]; then
              pytest Tests/test_HomePage.py
            elif [ "${{ github.event.inputs.test_options }}" == 'About Page' ]; then
              pytest Tests/test_AboutPage.py
            elif [ "${{ github.event.inputs.test_options }}" == 'Login' ]; then
              pytest Tests/test_Login.py
            elif [ "${{ github.event.inputs.test_options }}" == 'Sites Page' ]; then
              pytest Tests/test_Sites.py
            elif [ "${{ github.event.inputs.test_options }}" == 'Contact Page' ]; then
              pytest Tests/test_ContactPage.py
            elif [ "${{ github.event.inputs.test_options }}" == 'Sponsors Page' ]; then
              pytest Tests/test_SponsorsPage.py
            elif [ "${{ github.event.inputs.test_options }}" == 'Events page' ]; then
              pytest Tests/test_Events.py
            else
              echo "Invalid option"
            fi
          fi
        working-directory: .

      - name: Commit and push individual report to gh_pages
        if: always()
        continue-on-error: true
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b gh_pages || git checkout gh_pages
          git pull origin gh_pages --rebase
          mkdir -p results-chrome
          cp -r allure-results/* results-chrome/
          git add results-chrome
          git commit -m "Add report for chrome"
          n=0
          until [ $n -ge 5 ]; do
            git pull origin gh_pages --rebase
            git push origin gh_pages && break
            n=$((n+1))
            echo "Push failed, retrying in 3 seconds..."
            sleep 3
          done

          if [ $n -ge 5 ]; then
            echo "Failed to push after 5 attempts."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  edge-test:
    name: Run Edge tests
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || github.event.inputs.edge == 'true' }}
    steps:

      - name: Set browser variable
        run: echo "BROWSERS=edge" >> "$GITHUB_ENV"

      - name: Checkout test repository
        uses: actions/checkout@v4
        with:
          repository: Simeon-Zografov/QUBA_WEB

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
        working-directory: .

      - name: Set timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Europe/London"

      - name: Run Selenium tests
        continue-on-error: true
        env:
          URL: ${{ vars.URL }}
          PASSWORD: ${{ secrets.PASSWORD }}
          BROWSERS: ${{ env.BROWSERS }}
          EMAIL: ${{ vars.EMAIL }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          APIURL: ${{ vars.APIURL }}
          KCURL: ${{ vars.KCURL }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          CMS_URL: ${{ vars.CMS_URL }}
          CMS_EMAIL: ${{ secrets.CMS_EMAIL }}
          CMS_PASSWORD: ${{ secrets.CMS_PASSWORD }}

        run: |
          mkdir -p allure-results
          if [ "${{ github.event_name }}" == 'schedule' ] || [ "${{ github.event.inputs.test_options }}" == 'All' ]; then
            pytest
          else
            if [ "${{ github.event.inputs.test_options }}" == 'Home Page' ]; then
              pytest Tests/test_HomePage.py
            elif [ "${{ github.event.inputs.test_options }}" == 'About Page' ]; then
              pytest Tests/test_AboutPage.py
            elif [ "${{ github.event.inputs.test_options }}" == 'Login' ]; then
              pytest Tests/test_Login.py
            elif [ "${{ github.event.inputs.test_options }}" == 'Sites Page' ]; then
              pytest Tests/test_Sites.py
            elif [ "${{ github.event.inputs.test_options }}" == 'Contact Page' ]; then
              pytest Tests/test_ContactPage.py
            elif [ "${{ github.event.inputs.test_options }}" == 'Sponsors Page' ]; then
              pytest Tests/test_SponsorsPage.py
            elif [ "${{ github.event.inputs.test_options }}" == 'Events page' ]; then
              pytest Tests/test_Events.py
            else
              echo "Invalid option"
            fi
          fi
        working-directory: .

      - name: Commit and push individual report to gh_pages
        if: always()
        continue-on-error: true
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b gh_pages || git checkout gh_pages
          git pull origin gh_pages --rebase
          mkdir -p results-edge
          cp -r allure-results/* results-edge/
          git add results-edge
          git commit -m "Add report for edge"
          n=0
          until [ $n -ge 5 ]; do
            git pull origin gh_pages --rebase
            git push origin gh_pages && break
            n=$((n+1))
            echo "Push failed, retrying in 3 seconds..."
            sleep 3
          done

          if [ $n -ge 5 ]; then
            echo "Failed to push after 5 attempts."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  firefox-test:
    name: Run FireFox tests
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || github.event.inputs.firefox == 'true' }}
    steps:

      - name: Set browser variable
        run: echo "BROWSERS=firefox" >> "$GITHUB_ENV"

      - name: Checkout test repository
        uses: actions/checkout@v4
        with:
          repository: Simeon-Zografov/QUBA_WEB

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
        working-directory: .

      - name: Set timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Europe/London"

      - name: Run Selenium tests
        continue-on-error: true
        env:
          URL: ${{ vars.URL }}
          PASSWORD: ${{ secrets.PASSWORD }}
          BROWSERS: ${{ env.BROWSERS }}
          EMAIL: ${{ vars.EMAIL }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          APIURL: ${{ vars.APIURL }}
          KCURL: ${{ vars.KCURL }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          CMS_URL: ${{ vars.CMS_URL }}
          CMS_EMAIL: ${{ secrets.CMS_EMAIL }}
          CMS_PASSWORD: ${{ secrets.CMS_PASSWORD }}

        run: |
          mkdir -p allure-results
          if [ "${{ github.event_name }}" == 'schedule' ] || [ "${{ github.event.inputs.test_options }}" == 'All' ]; then
            pytest
          else
            if [ "${{ github.event.inputs.test_options }}" == 'Home Page' ]; then
              pytest Tests/test_HomePage.py
            elif [ "${{ github.event.inputs.test_options }}" == 'About Page' ]; then
              pytest Tests/test_AboutPage.py
            elif [ "${{ github.event.inputs.test_options }}" == 'Login' ]; then
              pytest Tests/test_Login.py
            elif [ "${{ github.event.inputs.test_options }}" == 'Sites Page' ]; then
              pytest Tests/test_Sites.py
            elif [ "${{ github.event.inputs.test_options }}" == 'Contact Page' ]; then
              pytest Tests/test_ContactPage.py
            elif [ "${{ github.event.inputs.test_options }}" == 'Sponsors Page' ]; then
              pytest Tests/test_SponsorsPage.py
            elif [ "${{ github.event.inputs.test_options }}" == 'Events page' ]; then
              pytest Tests/test_Events.py
            else
              echo "Invalid option"
            fi
          fi
        working-directory: .

      - name: Commit and push individual report to gh_pages
        if: always()
        continue-on-error: true
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b gh_pages || git checkout gh_pages
          git pull origin gh_pages --rebase
          mkdir -p results-firefox
          cp -r allure-results/* results-firefox/
          git add results-firefox
          git commit -m "Add report for firefox"
          n=0
          until [ $n -ge 5 ]; do
            git pull origin gh_pages --rebase
            git push origin gh_pages && break
            n=$((n+1))
            echo "Push failed, retrying in 3 seconds..."
            sleep 3
          done

          if [ $n -ge 5 ]; then
            echo "Failed to push after 5 attempts."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  safari-test:
    name: Run Safari tests
    runs-on: macos-latest
    if: ${{ github.event_name == 'schedule' || github.event.inputs.safari == 'true' }}
    steps:

      - name: Set browser variable
        run: echo "BROWSERS=safari" >> "$GITHUB_ENV"

      - name: Checkout test repository
        uses: actions/checkout@v4
        with:
          repository: Simeon-Zografov/QUBA_WEB

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
        working-directory: .

      - name: Set timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneMacos: "Europe/London"

      - name: Run Selenium tests
        continue-on-error: true
        env:
          URL: ${{ vars.URL }}
          PASSWORD: ${{ secrets.PASSWORD }}
          BROWSERS: ${{ env.BROWSERS }}
          EMAIL: ${{ vars.EMAIL }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          APIURL: ${{ vars.APIURL }}
          KCURL: ${{ vars.KCURL }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          CMS_URL: ${{ vars.CMS_URL }}
          CMS_EMAIL: ${{ secrets.CMS_EMAIL }}
          CMS_PASSWORD: ${{ secrets.CMS_PASSWORD }}
        run: |
          mkdir -p allure-results
          if [ "${{ github.event_name }}" == 'schedule' ] || [ "${{ github.event.inputs.test_options }}" == 'All' ]; then
            pytest
          else
            if [ "${{ github.event.inputs.test_options }}" == 'Home Page' ]; then
              pytest Tests/test_HomePage.py
            elif [ "${{ github.event.inputs.test_options }}" == 'About Page' ]; then
              pytest Tests/test_AboutPage.py
            elif [ "${{ github.event.inputs.test_options }}" == 'Login' ]; then
              pytest Tests/test_Login.py
            elif [ "${{ github.event.inputs.test_options }}" == 'Sites Page' ]; then
              pytest Tests/test_Sites.py
            elif [ "${{ github.event.inputs.test_options }}" == 'Contact Page' ]; then
              pytest Tests/test_ContactPage.py
            elif [ "${{ github.event.inputs.test_options }}" == 'Sponsors Page' ]; then
              pytest Tests/test_SponsorsPage.py
            elif [ "${{ github.event.inputs.test_options }}" == 'Events page' ]; then
              pytest Tests/test_Events.py
            else
              echo "Invalid option"
            fi
          fi
        working-directory: .

      - name: Commit and push individual report to gh_pages
        if: always()
        continue-on-error: true
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b gh_pages || git checkout gh_pages
          git pull origin gh_pages --rebase
          mkdir -p results-safari
          cp -r allure-results/* results-safari/
          git add results-safari
          git commit -m "Add report for safari"
          n=0
          until [ $n -ge 5 ]; do
            git pull origin gh_pages --rebase
            git push origin gh_pages && break
            n=$((n+1))
            echo "Push failed, retrying in 3 seconds..."
            sleep 3
          done

          if [ $n -ge 5 ]; then
            echo "Failed to push after 5 attempts."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  aggregate:
    name: Generate report
    needs: [chrome-test, edge-test, firefox-test, safari-test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout gh_pages branch
        uses: actions/checkout@v4
        with:
          repository: Simeon-Zografov/QUBA_WEB
          ref: gh_pages
          path: gh_pages

#      - name: Setup history directory
#        run: |
#          mkdir -p allure-results
#          mkdir -p last-history

#      - name: Install allure
#        run: |
#          npm install -g allure-commandline

      - name: Merge individual reports
        run: |
          echo "Removing previous allure-results"
          rm -rf allure-results
          rm -rf gh_pages/allure-results
          mkdir -p gh_pages/allure-results
          for browser_dir in gh_pages/results-*; do
            cp -r "$browser_dir"/* gh_pages/allure-results/
          done
          mkdir -p gh_pages/allure-results/history
          echo "Cleaning up results directories"
          rm -rf gh_pages/results-*

#      - name: Update allure-results folder permissions
#        run: |
#         chmod 777 -R allure-results
#          ls

#      - name: Retrieve existing history
#        run: |
#          if [ -d "last-history" ]; then
#            cp -r last-history allure-results/history
#          else
#            echo "No previous history found. Skipping."
#          fi

      - name: Build test report
        uses: simple-elf/allure-report-action@master
        if: always()
        with:
          gh_pages: gh_pages
          allure_history: allure-history
          allure_results: gh_pages/allure-results
          keep_reports: 20

#      - name: Update allure-history with new history
#        run: |
#          mkdir -p last-history
#          cp -r allure-results/history/* last-history/

#      - name: Copy previous history data
#        run: |
#          if [ -d history ]; then
#            mkdir -p allure-results/history
#            cp -r history/* allure-results/history/
#          fi
#
#      - name: Generate consolidated Allure report
#        run: |
#          allure generate allure-results --clean -o allure-report
#
      - name: Debugging after report generation
        run: |
          echo "Contents of gh_pages directory:"
          ls -la gh_pages

      - name: Clean up temporary directories
        run: |
          echo "Final cleanup of temporary directories"
          ls -la
          sudo rm -rf gh_pages/allure-results
          sudo rm -rf allure-results
          sudo rm -rf gh_pages/results-*
          echo "Contents of gh_pages after cleanup:"
          ls -la gh_pages

      - name: Confirm removal of allure-results
        run: |
          if [ -d "gh_pages/allure-results" ]; then
            echo "Directory still exists"
            ls -la gh_pages/allure-results
          else
            echo "Directory successfully removed"
          fi
#
#      - name: Commit and push consolidated report to gh_pages
#        run: |
#          git config --local user.name "github-actions[bot]"
#          git config --local user.email "github-actions[bot]@users.noreply.github.com"
#          git add allure-report -f
#          git commit -m "Update consolidated Allure report for GitHub Pages"
#          git push origin gh_pages
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh_pages
          publish_dir: allure-history